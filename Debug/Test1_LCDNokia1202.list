
Test1_LCDNokia1202.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800728c  0800728c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800728c  0800728c  0001728c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007294  08007294  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007294  08007294  00017294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800729c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000074  08007310  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08007310  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b4e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c5  00000000  00000000  00037bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ca5  00000000  00000000  0003cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015eba  00000000  00000000  0005ea85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee00  00000000  00000000  0007493f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014373f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce4  00000000  00000000  00143794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b90 	.word	0x08006b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006b90 	.word	0x08006b90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b96e 	b.w	80008ec <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	468c      	mov	ip, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 8083 	bne.w	800073e <__udivmoddi4+0x116>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d947      	bls.n	80006ce <__udivmoddi4+0xa6>
 800063e:	fab2 f282 	clz	r2, r2
 8000642:	b142      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000644:	f1c2 0020 	rsb	r0, r2, #32
 8000648:	fa24 f000 	lsr.w	r0, r4, r0
 800064c:	4091      	lsls	r1, r2
 800064e:	4097      	lsls	r7, r2
 8000650:	ea40 0c01 	orr.w	ip, r0, r1
 8000654:	4094      	lsls	r4, r2
 8000656:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800065a:	0c23      	lsrs	r3, r4, #16
 800065c:	fbbc f6f8 	udiv	r6, ip, r8
 8000660:	fa1f fe87 	uxth.w	lr, r7
 8000664:	fb08 c116 	mls	r1, r8, r6, ip
 8000668:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066c:	fb06 f10e 	mul.w	r1, r6, lr
 8000670:	4299      	cmp	r1, r3
 8000672:	d909      	bls.n	8000688 <__udivmoddi4+0x60>
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	f106 30ff 	add.w	r0, r6, #4294967295
 800067a:	f080 8119 	bcs.w	80008b0 <__udivmoddi4+0x288>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 8116 	bls.w	80008b0 <__udivmoddi4+0x288>
 8000684:	3e02      	subs	r6, #2
 8000686:	443b      	add	r3, r7
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000690:	fb08 3310 	mls	r3, r8, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 fe0e 	mul.w	lr, r0, lr
 800069c:	45a6      	cmp	lr, r4
 800069e:	d909      	bls.n	80006b4 <__udivmoddi4+0x8c>
 80006a0:	193c      	adds	r4, r7, r4
 80006a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a6:	f080 8105 	bcs.w	80008b4 <__udivmoddi4+0x28c>
 80006aa:	45a6      	cmp	lr, r4
 80006ac:	f240 8102 	bls.w	80008b4 <__udivmoddi4+0x28c>
 80006b0:	3802      	subs	r0, #2
 80006b2:	443c      	add	r4, r7
 80006b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006b8:	eba4 040e 	sub.w	r4, r4, lr
 80006bc:	2600      	movs	r6, #0
 80006be:	b11d      	cbz	r5, 80006c8 <__udivmoddi4+0xa0>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c5 4300 	strd	r4, r3, [r5]
 80006c8:	4631      	mov	r1, r6
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	b902      	cbnz	r2, 80006d2 <__udivmoddi4+0xaa>
 80006d0:	deff      	udf	#255	; 0xff
 80006d2:	fab2 f282 	clz	r2, r2
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d150      	bne.n	800077c <__udivmoddi4+0x154>
 80006da:	1bcb      	subs	r3, r1, r7
 80006dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006e0:	fa1f f887 	uxth.w	r8, r7
 80006e4:	2601      	movs	r6, #1
 80006e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80006ea:	0c21      	lsrs	r1, r4, #16
 80006ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80006f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f4:	fb08 f30c 	mul.w	r3, r8, ip
 80006f8:	428b      	cmp	r3, r1
 80006fa:	d907      	bls.n	800070c <__udivmoddi4+0xe4>
 80006fc:	1879      	adds	r1, r7, r1
 80006fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000702:	d202      	bcs.n	800070a <__udivmoddi4+0xe2>
 8000704:	428b      	cmp	r3, r1
 8000706:	f200 80e9 	bhi.w	80008dc <__udivmoddi4+0x2b4>
 800070a:	4684      	mov	ip, r0
 800070c:	1ac9      	subs	r1, r1, r3
 800070e:	b2a3      	uxth	r3, r4
 8000710:	fbb1 f0fe 	udiv	r0, r1, lr
 8000714:	fb0e 1110 	mls	r1, lr, r0, r1
 8000718:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800071c:	fb08 f800 	mul.w	r8, r8, r0
 8000720:	45a0      	cmp	r8, r4
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x10c>
 8000724:	193c      	adds	r4, r7, r4
 8000726:	f100 33ff 	add.w	r3, r0, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x10a>
 800072c:	45a0      	cmp	r8, r4
 800072e:	f200 80d9 	bhi.w	80008e4 <__udivmoddi4+0x2bc>
 8000732:	4618      	mov	r0, r3
 8000734:	eba4 0408 	sub.w	r4, r4, r8
 8000738:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800073c:	e7bf      	b.n	80006be <__udivmoddi4+0x96>
 800073e:	428b      	cmp	r3, r1
 8000740:	d909      	bls.n	8000756 <__udivmoddi4+0x12e>
 8000742:	2d00      	cmp	r5, #0
 8000744:	f000 80b1 	beq.w	80008aa <__udivmoddi4+0x282>
 8000748:	2600      	movs	r6, #0
 800074a:	e9c5 0100 	strd	r0, r1, [r5]
 800074e:	4630      	mov	r0, r6
 8000750:	4631      	mov	r1, r6
 8000752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000756:	fab3 f683 	clz	r6, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d14a      	bne.n	80007f4 <__udivmoddi4+0x1cc>
 800075e:	428b      	cmp	r3, r1
 8000760:	d302      	bcc.n	8000768 <__udivmoddi4+0x140>
 8000762:	4282      	cmp	r2, r0
 8000764:	f200 80b8 	bhi.w	80008d8 <__udivmoddi4+0x2b0>
 8000768:	1a84      	subs	r4, r0, r2
 800076a:	eb61 0103 	sbc.w	r1, r1, r3
 800076e:	2001      	movs	r0, #1
 8000770:	468c      	mov	ip, r1
 8000772:	2d00      	cmp	r5, #0
 8000774:	d0a8      	beq.n	80006c8 <__udivmoddi4+0xa0>
 8000776:	e9c5 4c00 	strd	r4, ip, [r5]
 800077a:	e7a5      	b.n	80006c8 <__udivmoddi4+0xa0>
 800077c:	f1c2 0320 	rsb	r3, r2, #32
 8000780:	fa20 f603 	lsr.w	r6, r0, r3
 8000784:	4097      	lsls	r7, r2
 8000786:	fa01 f002 	lsl.w	r0, r1, r2
 800078a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800078e:	40d9      	lsrs	r1, r3
 8000790:	4330      	orrs	r0, r6
 8000792:	0c03      	lsrs	r3, r0, #16
 8000794:	fbb1 f6fe 	udiv	r6, r1, lr
 8000798:	fa1f f887 	uxth.w	r8, r7
 800079c:	fb0e 1116 	mls	r1, lr, r6, r1
 80007a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007a4:	fb06 f108 	mul.w	r1, r6, r8
 80007a8:	4299      	cmp	r1, r3
 80007aa:	fa04 f402 	lsl.w	r4, r4, r2
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x19c>
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007b6:	f080 808d 	bcs.w	80008d4 <__udivmoddi4+0x2ac>
 80007ba:	4299      	cmp	r1, r3
 80007bc:	f240 808a 	bls.w	80008d4 <__udivmoddi4+0x2ac>
 80007c0:	3e02      	subs	r6, #2
 80007c2:	443b      	add	r3, r7
 80007c4:	1a5b      	subs	r3, r3, r1
 80007c6:	b281      	uxth	r1, r0
 80007c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb00 f308 	mul.w	r3, r0, r8
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0x1c4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f100 3cff 	add.w	ip, r0, #4294967295
 80007e2:	d273      	bcs.n	80008cc <__udivmoddi4+0x2a4>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d971      	bls.n	80008cc <__udivmoddi4+0x2a4>
 80007e8:	3802      	subs	r0, #2
 80007ea:	4439      	add	r1, r7
 80007ec:	1acb      	subs	r3, r1, r3
 80007ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80007f2:	e778      	b.n	80006e6 <__udivmoddi4+0xbe>
 80007f4:	f1c6 0c20 	rsb	ip, r6, #32
 80007f8:	fa03 f406 	lsl.w	r4, r3, r6
 80007fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000800:	431c      	orrs	r4, r3
 8000802:	fa20 f70c 	lsr.w	r7, r0, ip
 8000806:	fa01 f306 	lsl.w	r3, r1, r6
 800080a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800080e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000812:	431f      	orrs	r7, r3
 8000814:	0c3b      	lsrs	r3, r7, #16
 8000816:	fbb1 f9fe 	udiv	r9, r1, lr
 800081a:	fa1f f884 	uxth.w	r8, r4
 800081e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000822:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000826:	fb09 fa08 	mul.w	sl, r9, r8
 800082a:	458a      	cmp	sl, r1
 800082c:	fa02 f206 	lsl.w	r2, r2, r6
 8000830:	fa00 f306 	lsl.w	r3, r0, r6
 8000834:	d908      	bls.n	8000848 <__udivmoddi4+0x220>
 8000836:	1861      	adds	r1, r4, r1
 8000838:	f109 30ff 	add.w	r0, r9, #4294967295
 800083c:	d248      	bcs.n	80008d0 <__udivmoddi4+0x2a8>
 800083e:	458a      	cmp	sl, r1
 8000840:	d946      	bls.n	80008d0 <__udivmoddi4+0x2a8>
 8000842:	f1a9 0902 	sub.w	r9, r9, #2
 8000846:	4421      	add	r1, r4
 8000848:	eba1 010a 	sub.w	r1, r1, sl
 800084c:	b2bf      	uxth	r7, r7
 800084e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000852:	fb0e 1110 	mls	r1, lr, r0, r1
 8000856:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800085a:	fb00 f808 	mul.w	r8, r0, r8
 800085e:	45b8      	cmp	r8, r7
 8000860:	d907      	bls.n	8000872 <__udivmoddi4+0x24a>
 8000862:	19e7      	adds	r7, r4, r7
 8000864:	f100 31ff 	add.w	r1, r0, #4294967295
 8000868:	d22e      	bcs.n	80008c8 <__udivmoddi4+0x2a0>
 800086a:	45b8      	cmp	r8, r7
 800086c:	d92c      	bls.n	80008c8 <__udivmoddi4+0x2a0>
 800086e:	3802      	subs	r0, #2
 8000870:	4427      	add	r7, r4
 8000872:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000876:	eba7 0708 	sub.w	r7, r7, r8
 800087a:	fba0 8902 	umull	r8, r9, r0, r2
 800087e:	454f      	cmp	r7, r9
 8000880:	46c6      	mov	lr, r8
 8000882:	4649      	mov	r1, r9
 8000884:	d31a      	bcc.n	80008bc <__udivmoddi4+0x294>
 8000886:	d017      	beq.n	80008b8 <__udivmoddi4+0x290>
 8000888:	b15d      	cbz	r5, 80008a2 <__udivmoddi4+0x27a>
 800088a:	ebb3 020e 	subs.w	r2, r3, lr
 800088e:	eb67 0701 	sbc.w	r7, r7, r1
 8000892:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000896:	40f2      	lsrs	r2, r6
 8000898:	ea4c 0202 	orr.w	r2, ip, r2
 800089c:	40f7      	lsrs	r7, r6
 800089e:	e9c5 2700 	strd	r2, r7, [r5]
 80008a2:	2600      	movs	r6, #0
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	462e      	mov	r6, r5
 80008ac:	4628      	mov	r0, r5
 80008ae:	e70b      	b.n	80006c8 <__udivmoddi4+0xa0>
 80008b0:	4606      	mov	r6, r0
 80008b2:	e6e9      	b.n	8000688 <__udivmoddi4+0x60>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6fd      	b.n	80006b4 <__udivmoddi4+0x8c>
 80008b8:	4543      	cmp	r3, r8
 80008ba:	d2e5      	bcs.n	8000888 <__udivmoddi4+0x260>
 80008bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80008c0:	eb69 0104 	sbc.w	r1, r9, r4
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0x260>
 80008c8:	4608      	mov	r0, r1
 80008ca:	e7d2      	b.n	8000872 <__udivmoddi4+0x24a>
 80008cc:	4660      	mov	r0, ip
 80008ce:	e78d      	b.n	80007ec <__udivmoddi4+0x1c4>
 80008d0:	4681      	mov	r9, r0
 80008d2:	e7b9      	b.n	8000848 <__udivmoddi4+0x220>
 80008d4:	4666      	mov	r6, ip
 80008d6:	e775      	b.n	80007c4 <__udivmoddi4+0x19c>
 80008d8:	4630      	mov	r0, r6
 80008da:	e74a      	b.n	8000772 <__udivmoddi4+0x14a>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	4439      	add	r1, r7
 80008e2:	e713      	b.n	800070c <__udivmoddi4+0xe4>
 80008e4:	3802      	subs	r0, #2
 80008e6:	443c      	add	r4, r7
 80008e8:	e724      	b.n	8000734 <__udivmoddi4+0x10c>
 80008ea:	bf00      	nop

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <LCD_SendByte>:
while (delay--);
}


void LCD_SendByte(uint8_t mode, uint8_t c)
	{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	71bb      	strb	r3, [r7, #6]
		uint8_t SPI_Data[2];


		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2110      	movs	r1, #16
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f001 fe2a 	bl	8002560 <HAL_GPIO_WritePin>
		SPI_Data[0] = c;
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	733b      	strb	r3, [r7, #12]
		SPI_Data[1] = mode;
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, SPI_Data, 1, 5);
 8000914:	f107 010c 	add.w	r1, r7, #12
 8000918:	2305      	movs	r3, #5
 800091a:	2201      	movs	r2, #1
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <LCD_SendByte+0x48>)
 800091e:	f003 fdd6 	bl	80044ce <HAL_SPI_Transmit>
		//delay_us(1);
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2110      	movs	r1, #16
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f001 fe19 	bl	8002560 <HAL_GPIO_WritePin>
	}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000057c 	.word	0x2000057c

0800093c <LCD_Update>:
	_LCD_RAM[index] = (0x00);
	 }
}

// Обновляем данные на экране
void LCD_Update(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  for(uint8_t p = 0; p < 9; p++) {
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e029      	b.n	800099c <LCD_Update+0x60>
    LCD_SendByte(LCD_C, SetYAddr | p);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff ffcc 	bl	80008f0 <LCD_SendByte>
    LCD_SendByte(LCD_C, SetXAddr4);
 8000958:	2100      	movs	r1, #0
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ffc8 	bl	80008f0 <LCD_SendByte>
    LCD_SendByte(LCD_C, SetXAddr3);
 8000960:	2110      	movs	r1, #16
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff ffc4 	bl	80008f0 <LCD_SendByte>
    for(uint8_t col=0; col < LCD_X; col++){
 8000968:	2300      	movs	r3, #0
 800096a:	71bb      	strb	r3, [r7, #6]
 800096c:	e010      	b.n	8000990 <LCD_Update+0x54>
      LCD_SendByte(LCD_D, _LCD_RAM[(LCD_X * p) + col]);
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	015b      	lsls	r3, r3, #5
 8000978:	461a      	mov	r2, r3
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	4413      	add	r3, r2
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LCD_Update+0x70>)
 8000980:	5cd3      	ldrb	r3, [r2, r3]
 8000982:	4619      	mov	r1, r3
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff ffb3 	bl	80008f0 <LCD_SendByte>
    for(uint8_t col=0; col < LCD_X; col++){
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	3301      	adds	r3, #1
 800098e:	71bb      	strb	r3, [r7, #6]
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	2b5f      	cmp	r3, #95	; 0x5f
 8000994:	d9eb      	bls.n	800096e <LCD_Update+0x32>
  for(uint8_t p = 0; p < 9; p++) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	3301      	adds	r3, #1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b08      	cmp	r3, #8
 80009a0:	d9d2      	bls.n	8000948 <LCD_Update+0xc>
    }
  }
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000e8 	.word	0x200000e8

080009b0 <LCD_DrawPixel>:

// Рисование пикселя по координатам и цвету
void LCD_DrawPixel (uint8_t x, uint8_t y, uint8_t color) {
 80009b0:	b490      	push	{r4, r7}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	460b      	mov	r3, r1
 80009bc:	71bb      	strb	r3, [r7, #6]
 80009be:	4613      	mov	r3, r2
 80009c0:	717b      	strb	r3, [r7, #5]
  if ((x < 0) || (x >= LCD_X) || (y < 0) || (y >= LCD_Y)) return;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b5f      	cmp	r3, #95	; 0x5f
 80009c6:	d849      	bhi.n	8000a5c <LCD_DrawPixel+0xac>
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	2b43      	cmp	r3, #67	; 0x43
 80009cc:	d846      	bhi.n	8000a5c <LCD_DrawPixel+0xac>

  if (color) _LCD_RAM[x+ (y/8)*LCD_X] |= 1<<(y%8);
 80009ce:	797b      	ldrb	r3, [r7, #5]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d020      	beq.n	8000a16 <LCD_DrawPixel+0x66>
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	b2d8      	uxtb	r0, r3
 80009dc:	4601      	mov	r1, r0
 80009de:	460b      	mov	r3, r1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	440b      	add	r3, r1
 80009e4:	015b      	lsls	r3, r3, #5
 80009e6:	4413      	add	r3, r2
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <LCD_DrawPixel+0xb8>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	2101      	movs	r1, #1
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	b25c      	sxtb	r4, r3
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	4601      	mov	r1, r0
 8000a04:	460b      	mov	r3, r1
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	440b      	add	r3, r1
 8000a0a:	015b      	lsls	r3, r3, #5
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b2e1      	uxtb	r1, r4
 8000a10:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <LCD_DrawPixel+0xb8>)
 8000a12:	54d1      	strb	r1, [r2, r3]
 8000a14:	e023      	b.n	8000a5e <LCD_DrawPixel+0xae>
  else       _LCD_RAM[x+ (y/8)*LCD_X] &= ~(1<<(y%8));
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	b2d8      	uxtb	r0, r3
 8000a1e:	4601      	mov	r1, r0
 8000a20:	460b      	mov	r3, r1
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	440b      	add	r3, r1
 8000a26:	015b      	lsls	r3, r3, #5
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <LCD_DrawPixel+0xb8>)
 8000a2c:	5cd3      	ldrb	r3, [r2, r3]
 8000a2e:	b25a      	sxtb	r2, r3
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2101      	movs	r1, #1
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	4013      	ands	r3, r2
 8000a44:	b25c      	sxtb	r4, r3
 8000a46:	79fa      	ldrb	r2, [r7, #7]
 8000a48:	4601      	mov	r1, r0
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	440b      	add	r3, r1
 8000a50:	015b      	lsls	r3, r3, #5
 8000a52:	4413      	add	r3, r2
 8000a54:	b2e1      	uxtb	r1, r4
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <LCD_DrawPixel+0xb8>)
 8000a58:	54d1      	strb	r1, [r2, r3]
 8000a5a:	e000      	b.n	8000a5e <LCD_DrawPixel+0xae>
  if ((x < 0) || (x >= LCD_X) || (y < 0) || (y >= LCD_Y)) return;
 8000a5c:	bf00      	nop
}
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc90      	pop	{r4, r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	200000e8 	.word	0x200000e8

08000a6c <LCD_DrawLine>:

// Рисование линии
void LCD_DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71bb      	strb	r3, [r7, #6]
 8000a82:	460b      	mov	r3, r1
 8000a84:	717b      	strb	r3, [r7, #5]
 8000a86:	4613      	mov	r3, r2
 8000a88:	713b      	strb	r3, [r7, #4]
  int steep = abs(y1 - y0) > abs(x1 - x0);
 8000a8a:	793a      	ldrb	r2, [r7, #4]
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a94:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a98:	7979      	ldrb	r1, [r7, #5]
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	1acb      	subs	r3, r1, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bfb8      	it	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	bfcc      	ite	gt
 8000aa8:	2301      	movgt	r3, #1
 8000aaa:	2300      	movle	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	617b      	str	r3, [r7, #20]
  if (steep) {
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00b      	beq.n	8000ace <LCD_DrawLine+0x62>
    swap(x0, y0);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	74fb      	strb	r3, [r7, #19]
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	7cfb      	ldrb	r3, [r7, #19]
 8000ac0:	71bb      	strb	r3, [r7, #6]
    swap(x1, y1);
 8000ac2:	797b      	ldrb	r3, [r7, #5]
 8000ac4:	74bb      	strb	r3, [r7, #18]
 8000ac6:	793b      	ldrb	r3, [r7, #4]
 8000ac8:	717b      	strb	r3, [r7, #5]
 8000aca:	7cbb      	ldrb	r3, [r7, #18]
 8000acc:	713b      	strb	r3, [r7, #4]
  }
  if (x0 > x1) {
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	797b      	ldrb	r3, [r7, #5]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d90b      	bls.n	8000aee <LCD_DrawLine+0x82>
    swap(x0, x1);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	747b      	strb	r3, [r7, #17]
 8000ada:	797b      	ldrb	r3, [r7, #5]
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	7c7b      	ldrb	r3, [r7, #17]
 8000ae0:	717b      	strb	r3, [r7, #5]
    swap(y0, y1);
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	743b      	strb	r3, [r7, #16]
 8000ae6:	793b      	ldrb	r3, [r7, #4]
 8000ae8:	71bb      	strb	r3, [r7, #6]
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	713b      	strb	r3, [r7, #4]
  }
  int dx, dy;
  dx = x1 - x0;
 8000aee:	797a      	ldrb	r2, [r7, #5]
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	60fb      	str	r3, [r7, #12]
  dy = abs(y1 - y0);
 8000af6:	793a      	ldrb	r2, [r7, #4]
 8000af8:	79bb      	ldrb	r3, [r7, #6]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bfb8      	it	lt
 8000b00:	425b      	neglt	r3, r3
 8000b02:	60bb      	str	r3, [r7, #8]
  int err = dx / 2;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	0fda      	lsrs	r2, r3, #31
 8000b08:	4413      	add	r3, r2
 8000b0a:	105b      	asrs	r3, r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
  int ystep;
  if (y0 < y1) {ystep = 1;}
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	793b      	ldrb	r3, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d202      	bcs.n	8000b1c <LCD_DrawLine+0xb0>
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	e028      	b.n	8000b6e <LCD_DrawLine+0x102>
  else {ystep = -1;};
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	61bb      	str	r3, [r7, #24]
  for ( ; x0 <= x1; x0++) {
 8000b22:	e024      	b.n	8000b6e <LCD_DrawLine+0x102>
    if (steep) {LCD_DrawPixel(y0, x0, color);}
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <LCD_DrawLine+0xce>
 8000b2a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b2e:	79f9      	ldrb	r1, [r7, #7]
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff3c 	bl	80009b0 <LCD_DrawPixel>
 8000b38:	e006      	b.n	8000b48 <LCD_DrawLine+0xdc>
    else {LCD_DrawPixel(x0, y0, color);};
 8000b3a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b3e:	79b9      	ldrb	r1, [r7, #6]
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff34 	bl	80009b0 <LCD_DrawPixel>
		err -= dy;
 8000b48:	69fa      	ldr	r2, [r7, #28]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	61fb      	str	r3, [r7, #28]
    if (err < 0) {
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	da08      	bge.n	8000b68 <LCD_DrawLine+0xfc>
      y0 += ystep;
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
      err += dx;
 8000b60:	69fa      	ldr	r2, [r7, #28]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4413      	add	r3, r2
 8000b66:	61fb      	str	r3, [r7, #28]
  for ( ; x0 <= x1; x0++) {
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	797b      	ldrb	r3, [r7, #5]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d9d6      	bls.n	8000b24 <LCD_DrawLine+0xb8>
    }
  }
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3724      	adds	r7, #36	; 0x24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd90      	pop	{r4, r7, pc}

08000b80 <LCD_DrawFastVLine>:

// Рисование вертикальной линии
void LCD_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, uint8_t color) {
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	4604      	mov	r4, r0
 8000b88:	4608      	mov	r0, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4623      	mov	r3, r4
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	4603      	mov	r3, r0
 8000b94:	71bb      	strb	r3, [r7, #6]
 8000b96:	460b      	mov	r3, r1
 8000b98:	717b      	strb	r3, [r7, #5]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	713b      	strb	r3, [r7, #4]
  LCD_DrawLine(x, y, x, y+h-1, color);
 8000b9e:	79ba      	ldrb	r2, [r7, #6]
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b2dc      	uxtb	r4, r3
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	79b9      	ldrb	r1, [r7, #6]
 8000bae:	79f8      	ldrb	r0, [r7, #7]
 8000bb0:	793b      	ldrb	r3, [r7, #4]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	f7ff ff59 	bl	8000a6c <LCD_DrawLine>
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd90      	pop	{r4, r7, pc}

08000bc2 <LCD_DrawFastHLine>:

// Рисование горизонтальной линии
void LCD_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, uint8_t color) {
 8000bc2:	b590      	push	{r4, r7, lr}
 8000bc4:	b085      	sub	sp, #20
 8000bc6:	af02      	add	r7, sp, #8
 8000bc8:	4604      	mov	r4, r0
 8000bca:	4608      	mov	r0, r1
 8000bcc:	4611      	mov	r1, r2
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4623      	mov	r3, r4
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71bb      	strb	r3, [r7, #6]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	717b      	strb	r3, [r7, #5]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	713b      	strb	r3, [r7, #4]
  LCD_DrawLine(x, y, x+w-1, y, color);
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	797b      	ldrb	r3, [r7, #5]
 8000be4:	4413      	add	r3, r2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	3b01      	subs	r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	79bc      	ldrb	r4, [r7, #6]
 8000bee:	79b9      	ldrb	r1, [r7, #6]
 8000bf0:	79f8      	ldrb	r0, [r7, #7]
 8000bf2:	793b      	ldrb	r3, [r7, #4]
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	f7ff ff38 	bl	8000a6c <LCD_DrawLine>
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}

08000c04 <LCD_DrawRect>:

// Рисование прямоугольника
void LCD_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) {
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	4603      	mov	r3, r0
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	717b      	strb	r3, [r7, #5]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	713b      	strb	r3, [r7, #4]
  LCD_DrawFastHLine(x, y, w, color);
 8000c22:	7e3b      	ldrb	r3, [r7, #24]
 8000c24:	797a      	ldrb	r2, [r7, #5]
 8000c26:	79b9      	ldrb	r1, [r7, #6]
 8000c28:	79f8      	ldrb	r0, [r7, #7]
 8000c2a:	f7ff ffca 	bl	8000bc2 <LCD_DrawFastHLine>
  LCD_DrawFastHLine(x, y+h-1, w, color);
 8000c2e:	79ba      	ldrb	r2, [r7, #6]
 8000c30:	793b      	ldrb	r3, [r7, #4]
 8000c32:	4413      	add	r3, r2
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b2d9      	uxtb	r1, r3
 8000c3a:	7e3b      	ldrb	r3, [r7, #24]
 8000c3c:	797a      	ldrb	r2, [r7, #5]
 8000c3e:	79f8      	ldrb	r0, [r7, #7]
 8000c40:	f7ff ffbf 	bl	8000bc2 <LCD_DrawFastHLine>
  LCD_DrawFastVLine(x, y, h, color);
 8000c44:	7e3b      	ldrb	r3, [r7, #24]
 8000c46:	793a      	ldrb	r2, [r7, #4]
 8000c48:	79b9      	ldrb	r1, [r7, #6]
 8000c4a:	79f8      	ldrb	r0, [r7, #7]
 8000c4c:	f7ff ff98 	bl	8000b80 <LCD_DrawFastVLine>
  LCD_DrawFastVLine(x+w-1, y, h, color);
 8000c50:	79fa      	ldrb	r2, [r7, #7]
 8000c52:	797b      	ldrb	r3, [r7, #5]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b2d8      	uxtb	r0, r3
 8000c5c:	7e3b      	ldrb	r3, [r7, #24]
 8000c5e:	793a      	ldrb	r2, [r7, #4]
 8000c60:	79b9      	ldrb	r1, [r7, #6]
 8000c62:	f7ff ff8d 	bl	8000b80 <LCD_DrawFastVLine>
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}

08000c6e <LCD_FillRect>:

// Рисование залитый прямоугольник
void LCD_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) {
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4604      	mov	r4, r0
 8000c76:	4608      	mov	r0, r1
 8000c78:	4611      	mov	r1, r2
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4623      	mov	r3, r4
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4603      	mov	r3, r0
 8000c82:	71bb      	strb	r3, [r7, #6]
 8000c84:	460b      	mov	r3, r1
 8000c86:	717b      	strb	r3, [r7, #5]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	713b      	strb	r3, [r7, #4]
  for (int16_t i=x; i<x+w; i++) {
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	81fb      	strh	r3, [r7, #14]
 8000c90:	e00d      	b.n	8000cae <LCD_FillRect+0x40>
    LCD_DrawFastVLine(i, y, h, color);
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b2d8      	uxtb	r0, r3
 8000c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c9a:	793a      	ldrb	r2, [r7, #4]
 8000c9c:	79b9      	ldrb	r1, [r7, #6]
 8000c9e:	f7ff ff6f 	bl	8000b80 <LCD_DrawFastVLine>
  for (int16_t i=x; i<x+w; i++) {
 8000ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	81fb      	strh	r3, [r7, #14]
 8000cae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cb2:	79f9      	ldrb	r1, [r7, #7]
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	440b      	add	r3, r1
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbea      	blt.n	8000c92 <LCD_FillRect+0x24>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd90      	pop	{r4, r7, pc}
	...

08000cc8 <LCD_DrawChar>:
void LCD_FillScreen(uint8_t color) {
  LCD_FillRect(0, 0, LCD_X, LCD_Y, color);
}

// Нарисовать букву
void LCD_DrawChar(uint8_t x, uint8_t y, uint8_t color, unsigned char c) {
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71bb      	strb	r3, [r7, #6]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	717b      	strb	r3, [r7, #5]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	713b      	strb	r3, [r7, #4]
  if((x >= LCD_X) ||(y >= LCD_Y) || ((x + 4) < 0) || ((y + 7) < 0)) return;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b5f      	cmp	r3, #95	; 0x5f
 8000cea:	d870      	bhi.n	8000dce <LCD_DrawChar+0x106>
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	2b43      	cmp	r3, #67	; 0x43
 8000cf0:	d86d      	bhi.n	8000dce <LCD_DrawChar+0x106>
  if(c<128)            c = c-32;
 8000cf2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db02      	blt.n	8000d00 <LCD_DrawChar+0x38>
 8000cfa:	793b      	ldrb	r3, [r7, #4]
 8000cfc:	3b20      	subs	r3, #32
 8000cfe:	713b      	strb	r3, [r7, #4]
  if(c>=144 && c<=175) c = c-48;
 8000d00:	793b      	ldrb	r3, [r7, #4]
 8000d02:	2b8f      	cmp	r3, #143	; 0x8f
 8000d04:	d905      	bls.n	8000d12 <LCD_DrawChar+0x4a>
 8000d06:	793b      	ldrb	r3, [r7, #4]
 8000d08:	2baf      	cmp	r3, #175	; 0xaf
 8000d0a:	d802      	bhi.n	8000d12 <LCD_DrawChar+0x4a>
 8000d0c:	793b      	ldrb	r3, [r7, #4]
 8000d0e:	3b30      	subs	r3, #48	; 0x30
 8000d10:	713b      	strb	r3, [r7, #4]
  if(c>=128 && c<=143) c = c+16;
 8000d12:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	da05      	bge.n	8000d26 <LCD_DrawChar+0x5e>
 8000d1a:	793b      	ldrb	r3, [r7, #4]
 8000d1c:	2b8f      	cmp	r3, #143	; 0x8f
 8000d1e:	d802      	bhi.n	8000d26 <LCD_DrawChar+0x5e>
 8000d20:	793b      	ldrb	r3, [r7, #4]
 8000d22:	3310      	adds	r3, #16
 8000d24:	713b      	strb	r3, [r7, #4]
  if(c>=176 && c<=191) c = c-48;
 8000d26:	793b      	ldrb	r3, [r7, #4]
 8000d28:	2baf      	cmp	r3, #175	; 0xaf
 8000d2a:	d905      	bls.n	8000d38 <LCD_DrawChar+0x70>
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	2bbf      	cmp	r3, #191	; 0xbf
 8000d30:	d802      	bhi.n	8000d38 <LCD_DrawChar+0x70>
 8000d32:	793b      	ldrb	r3, [r7, #4]
 8000d34:	3b30      	subs	r3, #48	; 0x30
 8000d36:	713b      	strb	r3, [r7, #4]
  if(c>191)  return;
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	2bbf      	cmp	r3, #191	; 0xbf
 8000d3c:	d849      	bhi.n	8000dd2 <LCD_DrawChar+0x10a>
  for (uint8_t i=0; i<6; i++ ) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e040      	b.n	8000dc6 <LCD_DrawChar+0xfe>
    uint8_t line;
    if (i == 5) {line = 0x00;}
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d102      	bne.n	8000d50 <LCD_DrawChar+0x88>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73bb      	strb	r3, [r7, #14]
 8000d4e:	e037      	b.n	8000dc0 <LCD_DrawChar+0xf8>
    else {line = font[(c*5)+i];
 8000d50:	793a      	ldrb	r2, [r7, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	441a      	add	r2, r3
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <LCD_DrawChar+0x114>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	73bb      	strb	r3, [r7, #14]
    for (uint8_t j = 0; j<8; j++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	737b      	strb	r3, [r7, #13]
 8000d66:	e028      	b.n	8000dba <LCD_DrawChar+0xf2>
			{
				if (line & 0x01) {LCD_DrawPixel(x+i, y+j, color);}
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00c      	beq.n	8000d8c <LCD_DrawChar+0xc4>
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	4413      	add	r3, r2
 8000d78:	b2d8      	uxtb	r0, r3
 8000d7a:	79ba      	ldrb	r2, [r7, #6]
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	4413      	add	r3, r2
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	797a      	ldrb	r2, [r7, #5]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fe13 	bl	80009b0 <LCD_DrawPixel>
 8000d8a:	e010      	b.n	8000dae <LCD_DrawChar+0xe6>
				else {LCD_DrawPixel(x+i, y+j, !color);};
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	4413      	add	r3, r2
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	79ba      	ldrb	r2, [r7, #6]
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	4413      	add	r3, r2
 8000d9a:	b2d9      	uxtb	r1, r3
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	2301      	moveq	r3, #1
 8000da4:	2300      	movne	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	f7ff fe01 	bl	80009b0 <LCD_DrawPixel>
				line >>= 1;
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	085b      	lsrs	r3, r3, #1
 8000db2:	73bb      	strb	r3, [r7, #14]
    for (uint8_t j = 0; j<8; j++)
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	3301      	adds	r3, #1
 8000db8:	737b      	strb	r3, [r7, #13]
 8000dba:	7b7b      	ldrb	r3, [r7, #13]
 8000dbc:	2b07      	cmp	r3, #7
 8000dbe:	d9d3      	bls.n	8000d68 <LCD_DrawChar+0xa0>
  for (uint8_t i=0; i<6; i++ ) {
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d9bb      	bls.n	8000d44 <LCD_DrawChar+0x7c>
 8000dcc:	e002      	b.n	8000dd4 <LCD_DrawChar+0x10c>
  if((x >= LCD_X) ||(y >= LCD_Y) || ((x + 4) < 0) || ((y + 7) < 0)) return;
 8000dce:	bf00      	nop
 8000dd0:	e000      	b.n	8000dd4 <LCD_DrawChar+0x10c>
  if(c>191)  return;
 8000dd2:	bf00      	nop
			}
		}
  }
}
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd90      	pop	{r4, r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	08006df4 	.word	0x08006df4

08000de0 <LCD_print>:

// Вывод строки
void LCD_print(uint8_t x, uint8_t y, uint8_t color, char *str) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	460b      	mov	r3, r1
 8000dee:	71bb      	strb	r3, [r7, #6]
 8000df0:	4613      	mov	r3, r2
 8000df2:	717b      	strb	r3, [r7, #5]
  unsigned char type = *str;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	73fb      	strb	r3, [r7, #15]
  if(type>=128) x=x-3;
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	da1a      	bge.n	8000e38 <LCD_print+0x58>
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	71fb      	strb	r3, [r7, #7]
  while(*str){
 8000e08:	e016      	b.n	8000e38 <LCD_print+0x58>
    LCD_DrawChar(x, y, color, *str++);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	603a      	str	r2, [r7, #0]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	797a      	ldrb	r2, [r7, #5]
 8000e14:	79b9      	ldrb	r1, [r7, #6]
 8000e16:	79f8      	ldrb	r0, [r7, #7]
 8000e18:	f7ff ff56 	bl	8000cc8 <LCD_DrawChar>
    unsigned char type = *str;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	73bb      	strb	r3, [r7, #14]
    if (type>=128) {x=x+3;}
 8000e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da03      	bge.n	8000e32 <LCD_print+0x52>
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	3303      	adds	r3, #3
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	e002      	b.n	8000e38 <LCD_print+0x58>
    else {x=x+6;};
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	3306      	adds	r3, #6
 8000e36:	71fb      	strb	r3, [r7, #7]
  while(*str){
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1e4      	bne.n	8000e0a <LCD_print+0x2a>
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <LCD_DrawBitmap>:
};



// Вывод картинки
void LCD_DrawBitmap(uint8_t x, uint8_t y, const char *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	603a      	str	r2, [r7, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	71bb      	strb	r3, [r7, #6]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	717b      	strb	r3, [r7, #5]
	for (int16_t i=0; i < h; i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	81fb      	strh	r3, [r7, #14]
 8000e64:	e02f      	b.n	8000ec6 <LCD_DrawBitmap+0x7c>
    {
		for (int16_t j=0; j < w; j++ )
 8000e66:	2300      	movs	r3, #0
 8000e68:	81bb      	strh	r3, [r7, #12]
 8000e6a:	e021      	b.n	8000eb0 <LCD_DrawBitmap+0x66>
		{
			if (bitmap[i*w + j] >= 0x01)
 8000e6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e70:	797a      	ldrb	r2, [r7, #5]
 8000e72:	fb02 f203 	mul.w	r2, r2, r3
 8000e76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00d      	beq.n	8000ea4 <LCD_DrawBitmap+0x5a>
			{
				LCD_DrawPixel(x+j, y+i, color);
 8000e88:	89bb      	ldrh	r3, [r7, #12]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2d8      	uxtb	r0, r3
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	7f3a      	ldrb	r2, [r7, #28]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fd86 	bl	80009b0 <LCD_DrawPixel>
		for (int16_t j=0; j < w; j++ )
 8000ea4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	81bb      	strh	r3, [r7, #12]
 8000eb0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000eb4:	797b      	ldrb	r3, [r7, #5]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	dbd8      	blt.n	8000e6c <LCD_DrawBitmap+0x22>
	for (int16_t i=0; i < h; i++)
 8000eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	81fb      	strh	r3, [r7, #14]
 8000ec6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000eca:	7e3b      	ldrb	r3, [r7, #24]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbca      	blt.n	8000e66 <LCD_DrawBitmap+0x1c>
			}
		}
    }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <drawWiFi>:
  LCD_Clear();
  LCD_Update();
}

void drawWiFi(int countDiv)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b08c      	sub	sp, #48	; 0x30
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	if(countDiv > 4)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	dd02      	ble.n	8000eee <drawWiFi+0x14>
	{
#ifdef MY_DEBUG
		assert(!(countDiv > 4));
#else
		countDiv = 4;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	e004      	b.n	8000ef8 <drawWiFi+0x1e>
#endif
	}
	else if(countDiv < 0)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da01      	bge.n	8000ef8 <drawWiFi+0x1e>
	{
#ifdef MY_DEBUG
		assert(!(countDiv < 0));
#else
		countDiv = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
#endif
	}

	LCD_DrawFastVLine(5, 1, 9, 1);
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2209      	movs	r2, #9
 8000efc:	2101      	movs	r1, #1
 8000efe:	2005      	movs	r0, #5
 8000f00:	f7ff fe3e 	bl	8000b80 <LCD_DrawFastVLine>
	LCD_DrawFastHLine(1, 1, 9, 1);
 8000f04:	2301      	movs	r3, #1
 8000f06:	2209      	movs	r2, #9
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fe59 	bl	8000bc2 <LCD_DrawFastHLine>

	LCD_DrawPixel(2, 2, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2102      	movs	r1, #2
 8000f14:	2002      	movs	r0, #2
 8000f16:	f7ff fd4b 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(3, 3, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f7ff fd46 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(4, 4, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2104      	movs	r1, #4
 8000f28:	2004      	movs	r0, #4
 8000f2a:	f7ff fd41 	bl	80009b0 <LCD_DrawPixel>

	LCD_DrawPixel(6, 4, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2104      	movs	r1, #4
 8000f32:	2006      	movs	r0, #6
 8000f34:	f7ff fd3c 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(7, 3, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	2007      	movs	r0, #7
 8000f3e:	f7ff fd37 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(8, 2, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2102      	movs	r1, #2
 8000f46:	2008      	movs	r0, #8
 8000f48:	f7ff fd32 	bl	80009b0 <LCD_DrawPixel>

	if(countDiv != 0)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d033      	beq.n	8000fba <drawWiFi+0xe0>
	{
		int startX = 8;
 8000f52:	2308      	movs	r3, #8
 8000f54:	61fb      	str	r3, [r7, #28]
		int stepX = 3;
 8000f56:	2303      	movs	r3, #3
 8000f58:	61bb      	str	r3, [r7, #24]
		int startY = 7;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	617b      	str	r3, [r7, #20]
		int stepY = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	613b      	str	r3, [r7, #16]
		int endY = 3;
 8000f62:	2303      	movs	r3, #3
 8000f64:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < countDiv; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f6a:	e021      	b.n	8000fb0 <drawWiFi+0xd6>
		{
			int step = i * stepY;
 8000f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	60bb      	str	r3, [r7, #8]
			LCD_DrawFastVLine(startX + i*stepX, startY - step, endY + step, 1);
 8000f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	fb12 f303 	smulbb	r3, r2, r3
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2d8      	uxtb	r0, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b2d9      	uxtb	r1, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f7ff fdeb 	bl	8000b80 <LCD_DrawFastVLine>
		for(int i = 0; i < countDiv; i++)
 8000faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fac:	3301      	adds	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbd9      	blt.n	8000f6c <drawWiFi+0x92>
				if(i + j == size - 1)
					LCD_DrawPixel(10 + i, 3 + j, 1);
			}
		}
	}
}
 8000fb8:	e038      	b.n	800102c <drawWiFi+0x152>
		int size = 7;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	623b      	str	r3, [r7, #32]
		for(int i = 0; i < size; i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc2:	e02f      	b.n	8001024 <drawWiFi+0x14a>
			for(int j = 0; j < size; j++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc8:	e025      	b.n	8001016 <drawWiFi+0x13c>
				if(i == j)
 8000fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d10b      	bne.n	8000fea <drawWiFi+0x110>
					LCD_DrawPixel(10 + i, 3 + j, 1);
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	330a      	adds	r3, #10
 8000fd8:	b2d8      	uxtb	r0, r3
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	3303      	adds	r3, #3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fce3 	bl	80009b0 <LCD_DrawPixel>
				if(i + j == size - 1)
 8000fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	441a      	add	r2, r3
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d10b      	bne.n	8001010 <drawWiFi+0x136>
					LCD_DrawPixel(10 + i, 3 + j, 1);
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	330a      	adds	r3, #10
 8000ffe:	b2d8      	uxtb	r0, r3
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	b2db      	uxtb	r3, r3
 8001004:	3303      	adds	r3, #3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fcd0 	bl	80009b0 <LCD_DrawPixel>
			for(int j = 0; j < size; j++)
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	3301      	adds	r3, #1
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbd5      	blt.n	8000fca <drawWiFi+0xf0>
		for(int i = 0; i < size; i++)
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	3301      	adds	r3, #1
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
 8001024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbcb      	blt.n	8000fc4 <drawWiFi+0xea>
}
 800102c:	bf00      	nop
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <LCD_ClearWifi>:

void LCD_ClearWifi() {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
	int x = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
	int y = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
	int w = 18;
 8001042:	2312      	movs	r3, #18
 8001044:	60bb      	str	r3, [r7, #8]
	int h = 11;
 8001046:	230b      	movs	r3, #11
 8001048:	607b      	str	r3, [r7, #4]
	int color = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
	for (int16_t i=0; i < h; i++)
 800104e:	2300      	movs	r3, #0
 8001050:	82fb      	strh	r3, [r7, #22]
 8001052:	e024      	b.n	800109e <LCD_ClearWifi+0x6a>
    {
		for (int16_t j=0; j < w; j++ )
 8001054:	2300      	movs	r3, #0
 8001056:	82bb      	strh	r3, [r7, #20]
 8001058:	e016      	b.n	8001088 <LCD_ClearWifi+0x54>
		{
			LCD_DrawPixel(x+j, y+i, color);
 800105a:	8abb      	ldrh	r3, [r7, #20]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4413      	add	r3, r2
 8001064:	b2d8      	uxtb	r0, r3
 8001066:	8afb      	ldrh	r3, [r7, #22]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4413      	add	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fc9a 	bl	80009b0 <LCD_DrawPixel>
		for (int16_t j=0; j < w; j++ )
 800107c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001080:	b29b      	uxth	r3, r3
 8001082:	3301      	adds	r3, #1
 8001084:	b29b      	uxth	r3, r3
 8001086:	82bb      	strh	r3, [r7, #20]
 8001088:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	429a      	cmp	r2, r3
 8001090:	dce3      	bgt.n	800105a <LCD_ClearWifi+0x26>
	for (int16_t i=0; i < h; i++)
 8001092:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001096:	b29b      	uxth	r3, r3
 8001098:	3301      	adds	r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
 800109e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dcd5      	bgt.n	8001054 <LCD_ClearWifi+0x20>
		}
    }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <LCD_Battery>:
  	return;
}


void LCD_Battery(int countDiv)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af02      	add	r7, sp, #8
 80010b8:	6078      	str	r0, [r7, #4]
	if(countDiv > 4)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	dd02      	ble.n	80010c6 <LCD_Battery+0x14>
	{
#ifdef MY_DEBUG
		assert(!(countDiv > 4));
#else
		countDiv = 4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	e004      	b.n	80010d0 <LCD_Battery+0x1e>
#endif
	}
	else if(countDiv < 0)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da01      	bge.n	80010d0 <LCD_Battery+0x1e>
	{
#ifdef MY_DEBUG
		assert(!(countDiv < 0));
#else
		countDiv = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
#endif
	}

	LCD_DrawRect(96-18, 2, 15, 8, 1);
 80010d0:	2301      	movs	r3, #1
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2308      	movs	r3, #8
 80010d6:	220f      	movs	r2, #15
 80010d8:	2102      	movs	r1, #2
 80010da:	204e      	movs	r0, #78	; 0x4e
 80010dc:	f7ff fd92 	bl	8000c04 <LCD_DrawRect>
	LCD_DrawPixel(96-2, 3, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2103      	movs	r1, #3
 80010e4:	205e      	movs	r0, #94	; 0x5e
 80010e6:	f7ff fc63 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(96-2, 8, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2108      	movs	r1, #8
 80010ee:	205e      	movs	r0, #94	; 0x5e
 80010f0:	f7ff fc5e 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(96-3, 3, 1);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2103      	movs	r1, #3
 80010f8:	205d      	movs	r0, #93	; 0x5d
 80010fa:	f7ff fc59 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(96-3, 8, 1);
 80010fe:	2201      	movs	r2, #1
 8001100:	2108      	movs	r1, #8
 8001102:	205d      	movs	r0, #93	; 0x5d
 8001104:	f7ff fc54 	bl	80009b0 <LCD_DrawPixel>

	LCD_DrawPixel(96-2, 3, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2103      	movs	r1, #3
 800110c:	205e      	movs	r0, #94	; 0x5e
 800110e:	f7ff fc4f 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(96-2, 4, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	2104      	movs	r1, #4
 8001116:	205e      	movs	r0, #94	; 0x5e
 8001118:	f7ff fc4a 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(96-2, 5, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	2105      	movs	r1, #5
 8001120:	205e      	movs	r0, #94	; 0x5e
 8001122:	f7ff fc45 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(96-2, 6, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	2106      	movs	r1, #6
 800112a:	205e      	movs	r0, #94	; 0x5e
 800112c:	f7ff fc40 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(96-2, 7, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	2107      	movs	r1, #7
 8001134:	205e      	movs	r0, #94	; 0x5e
 8001136:	f7ff fc3b 	bl	80009b0 <LCD_DrawPixel>
	LCD_DrawPixel(96-2, 8, 1);
 800113a:	2201      	movs	r2, #1
 800113c:	2108      	movs	r1, #8
 800113e:	205e      	movs	r0, #94	; 0x5e
 8001140:	f7ff fc36 	bl	80009b0 <LCD_DrawPixel>

	int offsetX = 16;
 8001144:	2310      	movs	r3, #16
 8001146:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < countDiv; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e015      	b.n	800117a <LCD_Battery+0xc8>
	{
		LCD_FillRect(LCD_X - offsetX + i*3, 4, 2, 4, 1);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	0052      	lsls	r2, r2, #1
 8001156:	4413      	add	r3, r2
 8001158:	b2da      	uxtb	r2, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3360      	adds	r3, #96	; 0x60
 8001164:	b2d8      	uxtb	r0, r3
 8001166:	2301      	movs	r3, #1
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2304      	movs	r3, #4
 800116c:	2202      	movs	r2, #2
 800116e:	2104      	movs	r1, #4
 8001170:	f7ff fd7d 	bl	8000c6e <LCD_FillRect>
	for(int i = 0; i < countDiv; i++)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbe5      	blt.n	800114e <LCD_Battery+0x9c>
	}
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <LCD_ClearBattery>:

void LCD_ClearBattery()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
	int offsetX = 18;
 8001192:	2312      	movs	r3, #18
 8001194:	61bb      	str	r3, [r7, #24]
	int x = LCD_X - offsetX;
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 800119c:	617b      	str	r3, [r7, #20]
	int y = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
	int w = 17;
 80011a2:	2311      	movs	r3, #17
 80011a4:	60fb      	str	r3, [r7, #12]
	int h = 9;
 80011a6:	2309      	movs	r3, #9
 80011a8:	60bb      	str	r3, [r7, #8]
	int color = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
	for (int16_t i=0; i < h; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	83fb      	strh	r3, [r7, #30]
 80011b2:	e024      	b.n	80011fe <LCD_ClearBattery+0x72>
    {
		for (int16_t j=0; j < w; j++ )
 80011b4:	2300      	movs	r3, #0
 80011b6:	83bb      	strh	r3, [r7, #28]
 80011b8:	e016      	b.n	80011e8 <LCD_ClearBattery+0x5c>
		{
			LCD_DrawPixel(x+j, y+i, color);
 80011ba:	8bbb      	ldrh	r3, [r7, #28]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	b2d8      	uxtb	r0, r3
 80011c6:	8bfb      	ldrh	r3, [r7, #30]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fbea 	bl	80009b0 <LCD_DrawPixel>
		for (int16_t j=0; j < w; j++ )
 80011dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	83bb      	strh	r3, [r7, #28]
 80011e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dce3      	bgt.n	80011ba <LCD_ClearBattery+0x2e>
	for (int16_t i=0; i < h; i++)
 80011f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	83fb      	strh	r3, [r7, #30]
 80011fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	429a      	cmp	r2, r3
 8001206:	dcd5      	bgt.n	80011b4 <LCD_ClearBattery+0x28>
		}
    }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <testDisplay>:

int flag = 0;

void testDisplay()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
	//LCD_Clear();
	LCD_print(0, 30, 1, "17:34 24/03/2021");
 800121a:	4b78      	ldr	r3, [pc, #480]	; (80013fc <testDisplay+0x1e8>)
 800121c:	2201      	movs	r2, #1
 800121e:	211e      	movs	r1, #30
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fddd 	bl	8000de0 <LCD_print>
	LCD_Update();
 8001226:	f7ff fb89 	bl	800093c <LCD_Update>

	LCD_ClearWifi();
 800122a:	f7ff ff03 	bl	8001034 <LCD_ClearWifi>
	drawWiFi(4);
 800122e:	2004      	movs	r0, #4
 8001230:	f7ff fe53 	bl	8000eda <drawWiFi>

	LCD_DrawBitmap(19, 1, fillDrop, 9, 9, 1);
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	2309      	movs	r3, #9
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2309      	movs	r3, #9
 800123e:	4a70      	ldr	r2, [pc, #448]	; (8001400 <testDisplay+0x1ec>)
 8001240:	2101      	movs	r1, #1
 8001242:	2013      	movs	r0, #19
 8001244:	f7ff fe01 	bl	8000e4a <LCD_DrawBitmap>
	LCD_DrawBitmap(27, 1, unFillDrop, 9, 9, 1);
 8001248:	2301      	movs	r3, #1
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	2309      	movs	r3, #9
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2309      	movs	r3, #9
 8001252:	4a6c      	ldr	r2, [pc, #432]	; (8001404 <testDisplay+0x1f0>)
 8001254:	2101      	movs	r1, #1
 8001256:	201b      	movs	r0, #27
 8001258:	f7ff fdf7 	bl	8000e4a <LCD_DrawBitmap>
	LCD_DrawBitmap(36, 1, halfFillDrop, 9, 9, 1);
 800125c:	2301      	movs	r3, #1
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2309      	movs	r3, #9
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2309      	movs	r3, #9
 8001266:	4a68      	ldr	r2, [pc, #416]	; (8001408 <testDisplay+0x1f4>)
 8001268:	2101      	movs	r1, #1
 800126a:	2024      	movs	r0, #36	; 0x24
 800126c:	f7ff fded 	bl	8000e4a <LCD_DrawBitmap>

	LCD_ClearBattery();
 8001270:	f7ff ff8c 	bl	800118c <LCD_ClearBattery>
	LCD_Battery(4);
 8001274:	2004      	movs	r0, #4
 8001276:	f7ff ff1c 	bl	80010b2 <LCD_Battery>

	LCD_Update();
 800127a:	f7ff fb5f 	bl	800093c <LCD_Update>
		LCD_ClearBitmap(36, 1, 7, 7, 0);
		flag = 0;
	}
	LCD_Update();
	*/
	HAL_Delay(1000);
 800127e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001282:	f000 fecd 	bl	8002020 <HAL_Delay>
	//Test Wifi
	LCD_ClearWifi();
 8001286:	f7ff fed5 	bl	8001034 <LCD_ClearWifi>
	drawWiFi(4);
 800128a:	2004      	movs	r0, #4
 800128c:	f7ff fe25 	bl	8000eda <drawWiFi>
	LCD_print(0, 30, 1, "4 division");
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <testDisplay+0x1f8>)
 8001292:	2201      	movs	r2, #1
 8001294:	211e      	movs	r1, #30
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fda2 	bl	8000de0 <LCD_print>
	LCD_Update();
 800129c:	f7ff fb4e 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 80012a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a4:	f000 febc 	bl	8002020 <HAL_Delay>
	LCD_ClearWifi();
 80012a8:	f7ff fec4 	bl	8001034 <LCD_ClearWifi>
	drawWiFi(3);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f7ff fe14 	bl	8000eda <drawWiFi>
	LCD_print(0, 30, 1, "3 division");
 80012b2:	4b57      	ldr	r3, [pc, #348]	; (8001410 <testDisplay+0x1fc>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	211e      	movs	r1, #30
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fd91 	bl	8000de0 <LCD_print>
	LCD_Update();
 80012be:	f7ff fb3d 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 80012c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c6:	f000 feab 	bl	8002020 <HAL_Delay>
	LCD_ClearWifi();
 80012ca:	f7ff feb3 	bl	8001034 <LCD_ClearWifi>
	drawWiFi(2);
 80012ce:	2002      	movs	r0, #2
 80012d0:	f7ff fe03 	bl	8000eda <drawWiFi>
	LCD_print(0, 30, 1, "2 division");
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <testDisplay+0x200>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	211e      	movs	r1, #30
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff fd80 	bl	8000de0 <LCD_print>
	LCD_Update();
 80012e0:	f7ff fb2c 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 80012e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e8:	f000 fe9a 	bl	8002020 <HAL_Delay>
	LCD_ClearWifi();
 80012ec:	f7ff fea2 	bl	8001034 <LCD_ClearWifi>
	drawWiFi(1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fdf2 	bl	8000eda <drawWiFi>
	LCD_print(0, 30, 1, "1 division");
 80012f6:	4b48      	ldr	r3, [pc, #288]	; (8001418 <testDisplay+0x204>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	211e      	movs	r1, #30
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fd6f 	bl	8000de0 <LCD_print>
	LCD_Update();
 8001302:	f7ff fb1b 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 8001306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800130a:	f000 fe89 	bl	8002020 <HAL_Delay>
	LCD_ClearWifi();
 800130e:	f7ff fe91 	bl	8001034 <LCD_ClearWifi>
	drawWiFi(0);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fde1 	bl	8000eda <drawWiFi>
	LCD_print(0, 30, 1, "not signal");
 8001318:	4b40      	ldr	r3, [pc, #256]	; (800141c <testDisplay+0x208>)
 800131a:	2201      	movs	r2, #1
 800131c:	211e      	movs	r1, #30
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fd5e 	bl	8000de0 <LCD_print>
	LCD_Update();
 8001324:	f7ff fb0a 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 8001328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132c:	f000 fe78 	bl	8002020 <HAL_Delay>
	// Test Battery
	LCD_ClearBattery();
 8001330:	f7ff ff2c 	bl	800118c <LCD_ClearBattery>
	LCD_Battery(4);
 8001334:	2004      	movs	r0, #4
 8001336:	f7ff febc 	bl	80010b2 <LCD_Battery>
	LCD_print(0, 30, 1, "4 division");
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <testDisplay+0x1f8>)
 800133c:	2201      	movs	r2, #1
 800133e:	211e      	movs	r1, #30
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fd4d 	bl	8000de0 <LCD_print>
	LCD_Update();
 8001346:	f7ff faf9 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 800134a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134e:	f000 fe67 	bl	8002020 <HAL_Delay>
	LCD_ClearBattery();
 8001352:	f7ff ff1b 	bl	800118c <LCD_ClearBattery>
	LCD_Battery(3);
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff feab 	bl	80010b2 <LCD_Battery>
	LCD_print(0, 30, 1, "3 division");
 800135c:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <testDisplay+0x1fc>)
 800135e:	2201      	movs	r2, #1
 8001360:	211e      	movs	r1, #30
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff fd3c 	bl	8000de0 <LCD_print>
	LCD_Update();
 8001368:	f7ff fae8 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 800136c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001370:	f000 fe56 	bl	8002020 <HAL_Delay>
	LCD_ClearBattery();
 8001374:	f7ff ff0a 	bl	800118c <LCD_ClearBattery>
	LCD_Battery(2);
 8001378:	2002      	movs	r0, #2
 800137a:	f7ff fe9a 	bl	80010b2 <LCD_Battery>
	LCD_print(0, 30, 1, "2 division");
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <testDisplay+0x200>)
 8001380:	2201      	movs	r2, #1
 8001382:	211e      	movs	r1, #30
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff fd2b 	bl	8000de0 <LCD_print>
	LCD_Update();
 800138a:	f7ff fad7 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 800138e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001392:	f000 fe45 	bl	8002020 <HAL_Delay>

	LCD_ClearBattery();
 8001396:	f7ff fef9 	bl	800118c <LCD_ClearBattery>
	LCD_Battery(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff fe89 	bl	80010b2 <LCD_Battery>
	LCD_print(0, 30, 1, "1 division");
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <testDisplay+0x204>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	211e      	movs	r1, #30
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fd1a 	bl	8000de0 <LCD_print>
	LCD_Update();
 80013ac:	f7ff fac6 	bl	800093c <LCD_Update>
	HAL_Delay(1000);
 80013b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b4:	f000 fe34 	bl	8002020 <HAL_Delay>

	for(int i = 0; i < 3; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	e013      	b.n	80013e6 <testDisplay+0x1d2>
	{
		LCD_ClearBattery();
 80013be:	f7ff fee5 	bl	800118c <LCD_ClearBattery>
		LCD_Update();
 80013c2:	f7ff fabb 	bl	800093c <LCD_Update>
		HAL_Delay(500);
 80013c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ca:	f000 fe29 	bl	8002020 <HAL_Delay>
		LCD_Battery(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff fe6f 	bl	80010b2 <LCD_Battery>
		LCD_Update();
 80013d4:	f7ff fab2 	bl	800093c <LCD_Update>
		HAL_Delay(500);
 80013d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013dc:	f000 fe20 	bl	8002020 <HAL_Delay>
	for(int i = 0; i < 3; i++)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3301      	adds	r3, #1
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	dde8      	ble.n	80013be <testDisplay+0x1aa>
	}

	HAL_Delay(1000);
 80013ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f0:	f000 fe16 	bl	8002020 <HAL_Delay>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08006ba8 	.word	0x08006ba8
 8001400:	08007114 	.word	0x08007114
 8001404:	08007168 	.word	0x08007168
 8001408:	080071bc 	.word	0x080071bc
 800140c:	08006bbc 	.word	0x08006bbc
 8001410:	08006bc8 	.word	0x08006bc8
 8001414:	08006bd4 	.word	0x08006bd4
 8001418:	08006be0 	.word	0x08006be0
 800141c:	08006bec 	.word	0x08006bec

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001424:	b08a      	sub	sp, #40	; 0x28
 8001426:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001428:	f000 fd85 	bl	8001f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142c:	f000 f8fc 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001430:	f000 fa6e 	bl	8001910 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001434:	f000 fa3c 	bl	80018b0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001438:	f000 f996 	bl	8001768 <MX_SPI1_Init>
  MX_I2C3_Init();
 800143c:	f000 f954 	bl	80016e8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001440:	f000 fa06 	bl	8001850 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001444:	f000 f9ce 	bl	80017e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001448:	486a      	ldr	r0, [pc, #424]	; (80015f4 <main+0x1d4>)
 800144a:	f003 fb67 	bl	8004b1c <HAL_TIM_Base_Start_IT>
  	HAL_Delay(500);*/
   // RTC_SetCounter(RTC_GetRTC_Counter(&RTC_DateTime));



  	float tf = 0.0f, pf = 0.0f, af = 0.0f, hf = 0.0f;
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  	BME280_Init();
 8001466:	f004 fea3 	bl	80061b0 <BME280_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2108      	movs	r1, #8
 800146e:	4862      	ldr	r0, [pc, #392]	; (80015f8 <main+0x1d8>)
 8001470:	f001 f876 	bl	8002560 <HAL_GPIO_WritePin>





	  tf = BME280_ReadTemperature(&huart2);
 8001474:	4861      	ldr	r0, [pc, #388]	; (80015fc <main+0x1dc>)
 8001476:	f004 fe21 	bl	80060bc <BME280_ReadTemperature>
 800147a:	ee07 0a90 	vmov	s15, r0
 800147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001482:	edc7 7a05 	vstr	s15, [r7, #20]

	  		int si = sprintf((char*)str1, "Temperature: %d", (int)tf);
 8001486:	edd7 7a05 	vldr	s15, [r7, #20]
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	ee17 2a90 	vmov	r2, s15
 8001492:	495b      	ldr	r1, [pc, #364]	; (8001600 <main+0x1e0>)
 8001494:	485b      	ldr	r0, [pc, #364]	; (8001604 <main+0x1e4>)
 8001496:	f004 ff4d 	bl	8006334 <siprintf>
 800149a:	6078      	str	r0, [r7, #4]
	  		HAL_UART_Transmit(&huart2,(uint8_t*)str1, si, 0x1000);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	b29a      	uxth	r2, r3
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	4957      	ldr	r1, [pc, #348]	; (8001604 <main+0x1e4>)
 80014a6:	4855      	ldr	r0, [pc, #340]	; (80015fc <main+0x1dc>)
 80014a8:	f003 fe14 	bl	80050d4 <HAL_UART_Transmit>
	  		//LCD_SetPos(0, 0);
	  		sprintf(str1, "%11.3f *C", tf);
 80014ac:	6978      	ldr	r0, [r7, #20]
 80014ae:	f7ff f84b 	bl	8000548 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4954      	ldr	r1, [pc, #336]	; (8001608 <main+0x1e8>)
 80014b8:	4852      	ldr	r0, [pc, #328]	; (8001604 <main+0x1e4>)
 80014ba:	f004 ff3b 	bl	8006334 <siprintf>
	  		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80014be:	4851      	ldr	r0, [pc, #324]	; (8001604 <main+0x1e4>)
 80014c0:	f7fe fe86 	bl	80001d0 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014cc:	494d      	ldr	r1, [pc, #308]	; (8001604 <main+0x1e4>)
 80014ce:	484b      	ldr	r0, [pc, #300]	; (80015fc <main+0x1dc>)
 80014d0:	f003 fe00 	bl	80050d4 <HAL_UART_Transmit>
	  		//LCD_String(str1);
	  		pf = BME280_ReadPressure();
 80014d4:	f004 fe4c 	bl	8006170 <BME280_ReadPressure>
 80014d8:	ee07 0a90 	vmov	s15, r0
 80014dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e0:	edc7 7a04 	vstr	s15, [r7, #16]
	  		sprintf(str1, "Pressure: %.3f Pa; %.3f hPa; %.3f mmHg\r\n", pf, pf/1000.0f, pf * 0.000750061683f); // @suppress("Float formatting support")
 80014e4:	6938      	ldr	r0, [r7, #16]
 80014e6:	f7ff f82f 	bl	8000548 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800160c <main+0x1ec>
 80014f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014fa:	ee16 0a90 	vmov	r0, s13
 80014fe:	f7ff f823 	bl	8000548 <__aeabi_f2d>
 8001502:	4604      	mov	r4, r0
 8001504:	460d      	mov	r5, r1
 8001506:	edd7 7a04 	vldr	s15, [r7, #16]
 800150a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001610 <main+0x1f0>
 800150e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001512:	ee17 0a90 	vmov	r0, s15
 8001516:	f7ff f817 	bl	8000548 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001522:	e9cd 4500 	strd	r4, r5, [sp]
 8001526:	4642      	mov	r2, r8
 8001528:	464b      	mov	r3, r9
 800152a:	493a      	ldr	r1, [pc, #232]	; (8001614 <main+0x1f4>)
 800152c:	4835      	ldr	r0, [pc, #212]	; (8001604 <main+0x1e4>)
 800152e:	f004 ff01 	bl	8006334 <siprintf>
	  		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001532:	4834      	ldr	r0, [pc, #208]	; (8001604 <main+0x1e4>)
 8001534:	f7fe fe4c 	bl	80001d0 <strlen>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	4930      	ldr	r1, [pc, #192]	; (8001604 <main+0x1e4>)
 8001542:	482e      	ldr	r0, [pc, #184]	; (80015fc <main+0x1dc>)
 8001544:	f003 fdc6 	bl	80050d4 <HAL_UART_Transmit>
	  		//LCD_SetPos(0, 1);
	  		sprintf(str1, "%11.3f hPa", pf/1000.0f); // @suppress("Float formatting support")
 8001548:	edd7 7a04 	vldr	s15, [r7, #16]
 800154c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800160c <main+0x1ec>
 8001550:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001554:	ee16 0a90 	vmov	r0, s13
 8001558:	f7fe fff6 	bl	8000548 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	492d      	ldr	r1, [pc, #180]	; (8001618 <main+0x1f8>)
 8001562:	4828      	ldr	r0, [pc, #160]	; (8001604 <main+0x1e4>)
 8001564:	f004 fee6 	bl	8006334 <siprintf>
	  		//LCD_String(str1);
	  		//LCD_SetPos(0, 2);
	  		sprintf(str1, "%11.3f mmHg", pf * 0.000750061683f); // @suppress("Float formatting support")
 8001568:	edd7 7a04 	vldr	s15, [r7, #16]
 800156c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001610 <main+0x1f0>
 8001570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001574:	ee17 0a90 	vmov	r0, s15
 8001578:	f7fe ffe6 	bl	8000548 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4926      	ldr	r1, [pc, #152]	; (800161c <main+0x1fc>)
 8001582:	4820      	ldr	r0, [pc, #128]	; (8001604 <main+0x1e4>)
 8001584:	f004 fed6 	bl	8006334 <siprintf>
	  		//LCD_String(str1);
	  		//af = BME280_ReadAltitude(SEALEVELPRESSURE_PA);
	  		//sprintf(str1, "Altitude: %.3f m\r\n", af); // @suppress("Float formatting support")
	  		//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	  		hf = BME280_ReadHumidity();
 8001588:	f004 fe02 	bl	8006190 <BME280_ReadHumidity>
 800158c:	ee07 0a90 	vmov	s15, r0
 8001590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001594:	edc7 7a02 	vstr	s15, [r7, #8]
	  		sprintf(str1, "Humidity: %.3f %%\r\n", hf); // @suppress("Float formatting support")
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	491f      	ldr	r1, [pc, #124]	; (8001620 <main+0x200>)
 80015a4:	4817      	ldr	r0, [pc, #92]	; (8001604 <main+0x1e4>)
 80015a6:	f004 fec5 	bl	8006334 <siprintf>
	  		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80015aa:	4816      	ldr	r0, [pc, #88]	; (8001604 <main+0x1e4>)
 80015ac:	f7fe fe10 	bl	80001d0 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	4912      	ldr	r1, [pc, #72]	; (8001604 <main+0x1e4>)
 80015ba:	4810      	ldr	r0, [pc, #64]	; (80015fc <main+0x1dc>)
 80015bc:	f003 fd8a 	bl	80050d4 <HAL_UART_Transmit>
	  		//LCD_SetPos(0, 3);
	  		sprintf(str1, "%7.3f %% %4.1f m", hf, af); // @suppress("Float formatting support")
 80015c0:	68b8      	ldr	r0, [r7, #8]
 80015c2:	f7fe ffc1 	bl	8000548 <__aeabi_f2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7fe ffbc 	bl	8000548 <__aeabi_f2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	e9cd 2300 	strd	r2, r3, [sp]
 80015d8:	4622      	mov	r2, r4
 80015da:	462b      	mov	r3, r5
 80015dc:	4911      	ldr	r1, [pc, #68]	; (8001624 <main+0x204>)
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <main+0x1e4>)
 80015e0:	f004 fea8 	bl	8006334 <siprintf>
	  		//LCD_String(str1);
	  		HAL_Delay(1000);
 80015e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e8:	f000 fd1a 	bl	8002020 <HAL_Delay>
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"Hello\n", 6, 1000 );
	  //HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 1000);
	 // HAL_Delay(1000);
	 // HAL_GPIO_TooglePin()

	  testDisplay();
 80015ec:	f7ff fe12 	bl	8001214 <testDisplay>
  {
 80015f0:	e73b      	b.n	800146a <main+0x4a>
 80015f2:	bf00      	nop
 80015f4:	20000530 	.word	0x20000530
 80015f8:	48000400 	.word	0x48000400
 80015fc:	200005e0 	.word	0x200005e0
 8001600:	08006bf8 	.word	0x08006bf8
 8001604:	200004cc 	.word	0x200004cc
 8001608:	08006c08 	.word	0x08006c08
 800160c:	447a0000 	.word	0x447a0000
 8001610:	3a449fca 	.word	0x3a449fca
 8001614:	08006c14 	.word	0x08006c14
 8001618:	08006c40 	.word	0x08006c40
 800161c:	08006c4c 	.word	0x08006c4c
 8001620:	08006c58 	.word	0x08006c58
 8001624:	08006c6c 	.word	0x08006c6c

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0ac      	sub	sp, #176	; 0xb0
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001632:	2244      	movs	r2, #68	; 0x44
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f004 fe74 	bl	8006324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2254      	movs	r2, #84	; 0x54
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f004 fe66 	bl	8006324 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001658:	2302      	movs	r3, #2
 800165a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001660:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001662:	2310      	movs	r3, #16
 8001664:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001670:	4618      	mov	r0, r3
 8001672:	f001 fd7d 	bl	8003170 <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800167c:	f000 f9de 	bl	8001a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001680:	230f      	movs	r3, #15
 8001682:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001684:	2301      	movs	r3, #1
 8001686:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001694:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f002 f988 	bl	80039b0 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016a6:	f000 f9c9 	bl	8001a3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80016aa:	f240 1303 	movw	r3, #259	; 0x103
 80016ae:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fb7c 	bl	8003dbc <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016ca:	f000 f9b7 	bl	8001a3c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016d2:	f001 fcf7 	bl	80030c4 <HAL_PWREx_ControlVoltageScaling>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80016dc:	f000 f9ae 	bl	8001a3c <Error_Handler>
  }
}
 80016e0:	bf00      	nop
 80016e2:	37b0      	adds	r7, #176	; 0xb0
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_I2C3_Init+0x74>)
 80016ee:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <MX_I2C3_Init+0x78>)
 80016f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100B3D;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_I2C3_Init+0x74>)
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <MX_I2C3_Init+0x7c>)
 80016f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_I2C3_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_I2C3_Init+0x74>)
 8001700:	2201      	movs	r2, #1
 8001702:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_I2C3_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_I2C3_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_I2C3_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_I2C3_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_I2C3_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001722:	480e      	ldr	r0, [pc, #56]	; (800175c <MX_I2C3_Init+0x74>)
 8001724:	f000 ff34 	bl	8002590 <HAL_I2C_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800172e:	f000 f985 	bl	8001a3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001732:	2100      	movs	r1, #0
 8001734:	4809      	ldr	r0, [pc, #36]	; (800175c <MX_I2C3_Init+0x74>)
 8001736:	f001 fc1f 	bl	8002f78 <HAL_I2CEx_ConfigAnalogFilter>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001740:	f000 f97c 	bl	8001a3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_I2C3_Init+0x74>)
 8001748:	f001 fc61 	bl	800300e <HAL_I2CEx_ConfigDigitalFilter>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001752:	f000 f973 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000009c 	.word	0x2000009c
 8001760:	40005c00 	.word	0x40005c00
 8001764:	00100b3d 	.word	0x00100b3d

08001768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_SPI1_Init+0x74>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <MX_SPI1_Init+0x78>)
 8001770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_SPI1_Init+0x74>)
 8001774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_SPI1_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_9BIT;
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_SPI1_Init+0x74>)
 8001782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001786:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_SPI1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_SPI1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_SPI1_Init+0x74>)
 8001796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_SPI1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_SPI1_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_SPI1_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_SPI1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_SPI1_Init+0x74>)
 80017b6:	2207      	movs	r2, #7
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_SPI1_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_SPI1_Init+0x74>)
 80017c2:	2208      	movs	r2, #8
 80017c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_SPI1_Init+0x74>)
 80017c8:	f002 fdde 	bl	8004388 <HAL_SPI_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f000 f933 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000057c 	.word	0x2000057c
 80017e0:	40013000 	.word	0x40013000

080017e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_TIM6_Init+0x64>)
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <MX_TIM6_Init+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_TIM6_Init+0x64>)
 80017fc:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001800:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_TIM6_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_TIM6_Init+0x64>)
 800180a:	2263      	movs	r2, #99	; 0x63
 800180c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_TIM6_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <MX_TIM6_Init+0x64>)
 8001816:	f003 f929 	bl	8004a6c <HAL_TIM_Base_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001820:	f000 f90c 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_TIM6_Init+0x64>)
 8001832:	f003 fb7d 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800183c:	f000 f8fe 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000530 	.word	0x20000530
 800184c:	40001000 	.word	0x40001000

08001850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <MX_USART1_UART_Init+0x5c>)
 8001858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 800185c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001894:	f003 fbd0 	bl	8005038 <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800189e:	f000 f8cd 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000448 	.word	0x20000448
 80018ac:	40013800 	.word	0x40013800

080018b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <MX_USART2_UART_Init+0x5c>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018d6:	2208      	movs	r2, #8
 80018d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_USART2_UART_Init+0x58>)
 80018f4:	f003 fba0 	bl	8005038 <HAL_UART_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018fe:	f000 f89d 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200005e0 	.word	0x200005e0
 800190c:	40004400 	.word	0x40004400

08001910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <MX_GPIO_Init+0x120>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a41      	ldr	r2, [pc, #260]	; (8001a30 <MX_GPIO_Init+0x120>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <MX_GPIO_Init+0x120>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <MX_GPIO_Init+0x120>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <MX_GPIO_Init+0x120>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <MX_GPIO_Init+0x120>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <MX_GPIO_Init+0x120>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a35      	ldr	r2, [pc, #212]	; (8001a30 <MX_GPIO_Init+0x120>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <MX_GPIO_Init+0x120>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196e:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <MX_GPIO_Init+0x120>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <MX_GPIO_Init+0x120>)
 8001974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <MX_GPIO_Init+0x120>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Reset_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2130      	movs	r1, #48	; 0x30
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f000 fde7 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2108      	movs	r1, #8
 8001996:	4827      	ldr	r0, [pc, #156]	; (8001a34 <MX_GPIO_Init+0x124>)
 8001998:	f000 fde2 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 800199c:	2308      	movs	r3, #8
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b2:	f000 fc6b 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80019b6:	2310      	movs	r3, #16
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f000 fc5c 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Pin */
  GPIO_InitStruct.Pin = Reset_Pin;
 80019d4:	2320      	movs	r3, #32
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Reset_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ee:	f000 fc4d 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80019f2:	2308      	movs	r3, #8
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480a      	ldr	r0, [pc, #40]	; (8001a34 <MX_GPIO_Init+0x124>)
 8001a0a:	f000 fc3f 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_GPIO_Init+0x128>)
 8001a22:	f000 fc33 	bl	800228c <HAL_GPIO_Init>

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48001c00 	.word	0x48001c00

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <Error_Handler+0x8>
	...

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_MspInit+0x44>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_MspInit+0x44>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_MspInit+0x44>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x44>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x44>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6593      	str	r3, [r2, #88]	; 0x58
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x44>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d14c      	bne.n	8001b4c <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae6:	2312      	movs	r3, #18
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001af2:	2304      	movs	r3, #4
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b00:	f000 fbc4 	bl	800228c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b04:	2310      	movs	r3, #16
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b08:	2312      	movs	r3, #18
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b14:	2304      	movs	r3, #4
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480f      	ldr	r0, [pc, #60]	; (8001b5c <HAL_I2C_MspInit+0xcc>)
 8001b20:	f000 fbb4 	bl	800228c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001b2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2048      	movs	r0, #72	; 0x48
 8001b42:	f000 fb6c 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001b46:	2048      	movs	r0, #72	; 0x48
 8001b48:	f000 fb85 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40005c00 	.word	0x40005c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48000400 	.word	0x48000400

08001b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a25      	ldr	r2, [pc, #148]	; (8001c14 <HAL_SPI_MspInit+0xb4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d144      	bne.n	8001c0c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bda:	2305      	movs	r3, #5
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f000 fb50 	bl	800228c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOSI_Pin;
 8001bec:	2320      	movs	r3, #32
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_SPI_MspInit+0xbc>)
 8001c08:	f000 fb40 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40013000 	.word	0x40013000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000400 	.word	0x48000400

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_TIM_Base_MspInit+0x44>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d113      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_TIM_Base_MspInit+0x48>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_TIM_Base_MspInit+0x48>)
 8001c38:	f043 0310 	orr.w	r3, r3, #16
 8001c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_TIM_Base_MspInit+0x48>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2036      	movs	r0, #54	; 0x36
 8001c50:	f000 fae5 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c54:	2036      	movs	r0, #54	; 0x36
 8001c56:	f000 fafe 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40001000 	.word	0x40001000
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	; 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <HAL_UART_MspInit+0x100>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12a      	bne.n	8001ce4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a31      	ldr	r2, [pc, #196]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f000 fad5 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce2:	e03f      	b.n	8001d64 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_UART_MspInit+0x108>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d13a      	bne.n	8001d64 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_UART_MspInit+0x104>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2e:	2307      	movs	r3, #7
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f000 faa6 	bl	800228c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001d52:	2303      	movs	r3, #3
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f000 fa94 	bl	800228c <HAL_GPIO_Init>
}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	; 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40004400 	.word	0x40004400

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>

08001d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f90c 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if(pause < 500)
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <TIM6_DAC_IRQHandler+0x2c>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dd8:	d206      	bcs.n	8001de8 <TIM6_DAC_IRQHandler+0x1c>
		pause += 100;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <TIM6_DAC_IRQHandler+0x2c>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	3364      	adds	r3, #100	; 0x64
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <TIM6_DAC_IRQHandler+0x2c>)
 8001de4:	801a      	strh	r2, [r3, #0]
 8001de6:	e002      	b.n	8001dee <TIM6_DAC_IRQHandler+0x22>
	else
		pause = 0;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <TIM6_DAC_IRQHandler+0x2c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	801a      	strh	r2, [r3, #0]
   //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <TIM6_DAC_IRQHandler+0x30>)
 8001df0:	f002 fee8 	bl	8004bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000530 	.word	0x20000530

08001e00 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <I2C3_EV_IRQHandler+0x10>)
 8001e06:	f000 fe81 	bl	8002b0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000009c 	.word	0x2000009c

08001e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e1c:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <_sbrk+0x5c>)
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <_sbrk+0x60>)
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <_sbrk+0x64>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <_sbrk+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d207      	bcs.n	8001e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e44:	f004 fa44 	bl	80062d0 <__errno>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	e009      	b.n	8001e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_sbrk+0x64>)
 8001e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20010000 	.word	0x20010000
 8001e74:	00000400 	.word	0x00000400
 8001e78:	20000090 	.word	0x20000090
 8001e7c:	200006a0 	.word	0x200006a0

08001e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <SystemInit+0x5c>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <SystemInit+0x5c>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <SystemInit+0x60>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <SystemInit+0x60>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <SystemInit+0x60>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <SystemInit+0x60>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <SystemInit+0x60>)
 8001eac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001eb0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <SystemInit+0x60>)
 8001eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ebc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <SystemInit+0x60>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <SystemInit+0x60>)
 8001ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SystemInit+0x60>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee8:	f7ff ffca 	bl	8001e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001eec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eee:	e003      	b.n	8001ef8 <LoopCopyDataInit>

08001ef0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ef2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ef4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ef6:	3104      	adds	r1, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ef8:	480a      	ldr	r0, [pc, #40]	; (8001f24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001efc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001efe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f00:	d3f6      	bcc.n	8001ef0 <CopyDataInit>
	ldr	r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f04:	e002      	b.n	8001f0c <LoopFillZerobss>

08001f06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f08:	f842 3b04 	str.w	r3, [r2], #4

08001f0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <LoopForever+0x16>)
	cmp	r2, r3
 8001f0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f10:	d3f9      	bcc.n	8001f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f004 f9e3 	bl	80062dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7ff fa83 	bl	8001420 <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f1c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001f20:	0800729c 	.word	0x0800729c
	ldr	r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f28:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001f2c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001f30:	200006a0 	.word	0x200006a0

08001f34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_IRQHandler>

08001f36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f961 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f80e 	bl	8001f68 <HAL_InitTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	e001      	b.n	8001f5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f58:	f7ff fd76 	bl	8001a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_InitTick+0x6c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d023      	beq.n	8001fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_InitTick+0x70>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_InitTick+0x6c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f96d 	bl	8002272 <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d809      	bhi.n	8001fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f937 	bl	800221e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_InitTick+0x74>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e007      	b.n	8001fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e004      	b.n	8001fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	e001      	b.n	8001fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c
 8002004:	20000664 	.word	0x20000664

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000664 	.word	0x20000664

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000000c 	.word	0x2000000c

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff29 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff3e 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff31 	bl	80020cc <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffa2 	bl	80021c4 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229a:	e148      	b.n	800252e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 813a 	beq.w	8002528 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d00b      	beq.n	80022d4 <HAL_GPIO_Init+0x48>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c8:	2b11      	cmp	r3, #17
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b12      	cmp	r3, #18
 80022d2:	d130      	bne.n	8002336 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230a:	2201      	movs	r2, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0201 	and.w	r2, r3, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0xea>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b12      	cmp	r3, #18
 8002374:	d123      	bne.n	80023be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	6939      	ldr	r1, [r7, #16]
 80023ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0203 	and.w	r2, r3, #3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8094 	beq.w	8002528 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4b52      	ldr	r3, [pc, #328]	; (800254c <HAL_GPIO_Init+0x2c0>)
 8002402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002404:	4a51      	ldr	r2, [pc, #324]	; (800254c <HAL_GPIO_Init+0x2c0>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6613      	str	r3, [r2, #96]	; 0x60
 800240c:	4b4f      	ldr	r3, [pc, #316]	; (800254c <HAL_GPIO_Init+0x2c0>)
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002418:	4a4d      	ldr	r2, [pc, #308]	; (8002550 <HAL_GPIO_Init+0x2c4>)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002442:	d00d      	beq.n	8002460 <HAL_GPIO_Init+0x1d4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a43      	ldr	r2, [pc, #268]	; (8002554 <HAL_GPIO_Init+0x2c8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <HAL_GPIO_Init+0x1d0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a42      	ldr	r2, [pc, #264]	; (8002558 <HAL_GPIO_Init+0x2cc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_GPIO_Init+0x1cc>
 8002454:	2302      	movs	r3, #2
 8002456:	e004      	b.n	8002462 <HAL_GPIO_Init+0x1d6>
 8002458:	2307      	movs	r3, #7
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x1d6>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_GPIO_Init+0x1d6>
 8002460:	2300      	movs	r3, #0
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	f002 0203 	and.w	r2, r2, #3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4093      	lsls	r3, r2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002472:	4937      	ldr	r1, [pc, #220]	; (8002550 <HAL_GPIO_Init+0x2c4>)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_GPIO_Init+0x2d0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024a4:	4a2d      	ldr	r2, [pc, #180]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ce:	4a23      	ldr	r2, [pc, #140]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f8:	4a18      	ldr	r2, [pc, #96]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <HAL_GPIO_Init+0x2d0>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <HAL_GPIO_Init+0x2d0>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3301      	adds	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	f47f aeaf 	bne.w	800229c <HAL_GPIO_Init+0x10>
  }
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	40010000 	.word	0x40010000
 8002554:	48000400 	.word	0x48000400
 8002558:	48000800 	.word	0x48000800
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800257c:	e002      	b.n	8002584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e081      	b.n	80026a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff fa6a 	bl	8001a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e006      	b.n	8002618 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002616:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d104      	bne.n	800262a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002628:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800264c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	ea42 0103 	orr.w	r1, r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	021a      	lsls	r2, r3, #8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69d9      	ldr	r1, [r3, #28]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	460b      	mov	r3, r1
 80026c4:	813b      	strh	r3, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	f040 80f9 	bne.w	80028ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_I2C_Mem_Write+0x34>
 80026de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0ed      	b.n	80028cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Mem_Write+0x4e>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0e6      	b.n	80028cc <HAL_I2C_Mem_Write+0x21c>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002706:	f7ff fc7f 	bl	8002008 <HAL_GetTick>
 800270a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2319      	movs	r3, #25
 8002712:	2201      	movs	r2, #1
 8002714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fadd 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d1      	b.n	80028cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2221      	movs	r2, #33	; 0x21
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002750:	88f8      	ldrh	r0, [r7, #6]
 8002752:	893a      	ldrh	r2, [r7, #8]
 8002754:	8979      	ldrh	r1, [r7, #10]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	4603      	mov	r3, r0
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f9ed 	bl	8002b40 <I2C_RequestMemoryWrite>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0a9      	b.n	80028cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2bff      	cmp	r3, #255	; 0xff
 8002780:	d90e      	bls.n	80027a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	22ff      	movs	r2, #255	; 0xff
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	b2da      	uxtb	r2, r3
 800278e:	8979      	ldrh	r1, [r7, #10]
 8002790:	2300      	movs	r3, #0
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fbbf 	bl	8002f1c <I2C_TransferConfig>
 800279e:	e00f      	b.n	80027c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	2300      	movs	r3, #0
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fbae 	bl	8002f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fac7 	bl	8002d58 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e07b      	b.n	80028cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d034      	beq.n	8002878 <HAL_I2C_Mem_Write+0x1c8>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	2b00      	cmp	r3, #0
 8002814:	d130      	bne.n	8002878 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	2200      	movs	r2, #0
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fa59 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e04d      	b.n	80028cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2bff      	cmp	r3, #255	; 0xff
 8002838:	d90e      	bls.n	8002858 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	b2da      	uxtb	r2, r3
 8002846:	8979      	ldrh	r1, [r7, #10]
 8002848:	2300      	movs	r3, #0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fb63 	bl	8002f1c <I2C_TransferConfig>
 8002856:	e00f      	b.n	8002878 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	b2da      	uxtb	r2, r3
 8002868:	8979      	ldrh	r1, [r7, #10]
 800286a:	2300      	movs	r3, #0
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fb52 	bl	8002f1c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d19e      	bne.n	80027c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 faa6 	bl	8002dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e01a      	b.n	80028cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2220      	movs	r2, #32
 800289c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_I2C_Mem_Write+0x224>)
 80028aa:	400b      	ands	r3, r1
 80028ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	fe00e800 	.word	0xfe00e800

080028d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	4608      	mov	r0, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	817b      	strh	r3, [r7, #10]
 80028ea:	460b      	mov	r3, r1
 80028ec:	813b      	strh	r3, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f040 80fd 	bne.w	8002afa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_I2C_Mem_Read+0x34>
 8002906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0f1      	b.n	8002afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Mem_Read+0x4e>
 8002922:	2302      	movs	r3, #2
 8002924:	e0ea      	b.n	8002afc <HAL_I2C_Mem_Read+0x224>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800292e:	f7ff fb6b 	bl	8002008 <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2319      	movs	r3, #25
 800293a:	2201      	movs	r2, #1
 800293c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f9c9 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0d5      	b.n	8002afc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2222      	movs	r2, #34	; 0x22
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002978:	88f8      	ldrh	r0, [r7, #6]
 800297a:	893a      	ldrh	r2, [r7, #8]
 800297c:	8979      	ldrh	r1, [r7, #10]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4603      	mov	r3, r0
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f92d 	bl	8002be8 <I2C_RequestMemoryRead>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0ad      	b.n	8002afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2bff      	cmp	r3, #255	; 0xff
 80029a8:	d90e      	bls.n	80029c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	8979      	ldrh	r1, [r7, #10]
 80029b8:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <HAL_I2C_Mem_Read+0x22c>)
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 faab 	bl	8002f1c <I2C_TransferConfig>
 80029c6:	e00f      	b.n	80029e8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	8979      	ldrh	r1, [r7, #10]
 80029da:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_I2C_Mem_Read+0x22c>)
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fa9a 	bl	8002f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	2200      	movs	r2, #0
 80029f0:	2104      	movs	r1, #4
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f970 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07c      	b.n	8002afc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d034      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x1d0>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d130      	bne.n	8002aa8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f941 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e04d      	b.n	8002afc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d90e      	bls.n	8002a88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	22ff      	movs	r2, #255	; 0xff
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	8979      	ldrh	r1, [r7, #10]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fa4b 	bl	8002f1c <I2C_TransferConfig>
 8002a86:	e00f      	b.n	8002aa8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa3a 	bl	8002f1c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d19a      	bne.n	80029e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f98e 	bl	8002dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e01a      	b.n	8002afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2220      	movs	r2, #32
 8002acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_I2C_Mem_Read+0x230>)
 8002ada:	400b      	ands	r3, r1
 8002adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	80002400 	.word	0x80002400
 8002b08:	fe00e800 	.word	0xfe00e800

08002b0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	68f9      	ldr	r1, [r7, #12]
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	817b      	strh	r3, [r7, #10]
 8002b52:	460b      	mov	r3, r1
 8002b54:	813b      	strh	r3, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	8979      	ldrh	r1, [r7, #10]
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <I2C_RequestMemoryWrite+0xa4>)
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f9d7 	bl	8002f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	69b9      	ldr	r1, [r7, #24]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f8f0 	bl	8002d58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e02c      	b.n	8002bdc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
 8002b92:	e015      	b.n	8002bc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b94:	893b      	ldrh	r3, [r7, #8]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f8d6 	bl	8002d58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e012      	b.n	8002bdc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f884 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	80002000 	.word	0x80002000

08002be8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	817b      	strh	r3, [r7, #10]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	813b      	strh	r3, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	8979      	ldrh	r1, [r7, #10]
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <I2C_RequestMemoryRead+0xa4>)
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f984 	bl	8002f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f89d 	bl	8002d58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e02c      	b.n	8002c82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c2e:	893b      	ldrh	r3, [r7, #8]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
 8002c38:	e015      	b.n	8002c66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c3a:	893b      	ldrh	r3, [r7, #8]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f883 	bl	8002d58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e012      	b.n	8002c82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f831 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	80002000 	.word	0x80002000

08002c90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d103      	bne.n	8002cae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d007      	beq.n	8002ccc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	619a      	str	r2, [r3, #24]
  }
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce8:	e022      	b.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d01e      	beq.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf2:	f7ff f989 	bl	8002008 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d302      	bcc.n	8002d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d113      	bne.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e00f      	b.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d0cd      	beq.n	8002cea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d64:	e02c      	b.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f870 	bl	8002e50 <I2C_IsAcknowledgeFailed>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e02a      	b.n	8002dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d01e      	beq.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7ff f941 	bl	8002008 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d113      	bne.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e007      	b.n	8002dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d1cb      	bne.n	8002d66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de4:	e028      	b.n	8002e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f830 	bl	8002e50 <I2C_IsAcknowledgeFailed>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e026      	b.n	8002e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7ff f905 	bl	8002008 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d113      	bne.n	8002e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e007      	b.n	8002e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d1cf      	bne.n	8002de6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d151      	bne.n	8002f0e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e6a:	e022      	b.n	8002eb2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d01e      	beq.n	8002eb2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e74:	f7ff f8c8 	bl	8002008 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d302      	bcc.n	8002e8a <I2C_IsAcknowledgeFailed+0x3a>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f043 0220 	orr.w	r2, r3, #32
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e02e      	b.n	8002f10 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d1d5      	bne.n	8002e6c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff fedd 	bl	8002c90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <I2C_IsAcknowledgeFailed+0xc8>)
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f043 0204 	orr.w	r2, r3, #4
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	fe00e800 	.word	0xfe00e800

08002f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	817b      	strh	r3, [r7, #10]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	0d5b      	lsrs	r3, r3, #21
 8002f38:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <I2C_TransferConfig+0x58>)
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	43db      	mvns	r3, r3
 8002f42:	ea02 0103 	and.w	r1, r2, r3
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f4c:	7a7b      	ldrb	r3, [r7, #9]
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	03ff63ff 	.word	0x03ff63ff

08002f78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d138      	bne.n	8003000 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e032      	b.n	8003002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b20      	cmp	r3, #32
 8003022:	d139      	bne.n	8003098 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800302e:	2302      	movs	r3, #2
 8003030:	e033      	b.n	800309a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2224      	movs	r2, #36	; 0x24
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003060:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40007000 	.word	0x40007000

080030c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d2:	d130      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d4:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e0:	d038      	beq.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2232      	movs	r2, #50	; 0x32
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	4a1b      	ldr	r2, [pc, #108]	; (800316c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	3301      	adds	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003108:	e002      	b.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3b01      	subs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311c:	d102      	bne.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x60>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f2      	bne.n	800310a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d110      	bne.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e00f      	b.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d007      	beq.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003144:	4b07      	ldr	r3, [pc, #28]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003152:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40007000 	.word	0x40007000
 8003168:	20000004 	.word	0x20000004
 800316c:	431bde83 	.word	0x431bde83

08003170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f000 bc11 	b.w	80039a6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003184:	4ba0      	ldr	r3, [pc, #640]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318e:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80e4 	beq.w	800336e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_RCC_OscConfig+0x4c>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	f040 808b 	bne.w	80032ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	f040 8087 	bne.w	80032ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031bc:	4b92      	ldr	r3, [pc, #584]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_OscConfig+0x64>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e3e8      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	4b8b      	ldr	r3, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_RCC_OscConfig+0x7e>
 80031e4:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ec:	e005      	b.n	80031fa <HAL_RCC_OscConfig+0x8a>
 80031ee:	4b86      	ldr	r3, [pc, #536]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d223      	bcs.n	8003246 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fd7a 	bl	8003cfc <RCC_SetFlashLatencyFromMSIRange>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e3c9      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003212:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7c      	ldr	r2, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4977      	ldr	r1, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003230:	4b75      	ldr	r3, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	4972      	ldr	r1, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
 8003244:	e025      	b.n	8003292 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003246:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6f      	ldr	r2, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	496a      	ldr	r1, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003264:	4b68      	ldr	r3, [pc, #416]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	4965      	ldr	r1, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fd3a 	bl	8003cfc <RCC_SetFlashLatencyFromMSIRange>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e389      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003292:	f000 fc6f 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003296:	4602      	mov	r2, r0
 8003298:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	495a      	ldr	r1, [pc, #360]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80032a4:	5ccb      	ldrb	r3, [r1, r3]
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_OscConfig+0x2a0>)
 80032b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032b2:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x2a4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fe56 	bl	8001f68 <HAL_InitTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d052      	beq.n	800336c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	e36d      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d032      	beq.n	8003338 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032d2:	4b4d      	ldr	r3, [pc, #308]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a4c      	ldr	r2, [pc, #304]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032de:	f7fe fe93 	bl	8002008 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e6:	f7fe fe8f 	bl	8002008 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e356      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f8:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003304:	4b40      	ldr	r3, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800330a:	f043 0308 	orr.w	r3, r3, #8
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	493a      	ldr	r1, [pc, #232]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	4935      	ldr	r1, [pc, #212]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
 8003336:	e01a      	b.n	800336e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003338:	4b33      	ldr	r3, [pc, #204]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003344:	f7fe fe60 	bl	8002008 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800334c:	f7fe fe5c 	bl	8002008 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e323      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1dc>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d073      	beq.n	8003462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d005      	beq.n	800338c <HAL_RCC_OscConfig+0x21c>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d10e      	bne.n	80033a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d063      	beq.n	8003460 <HAL_RCC_OscConfig+0x2f0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d15f      	bne.n	8003460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e300      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x24c>
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0x288>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x270>
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x288>
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a05      	ldr	r2, [pc, #20]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fe02 	bl	8002008 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003406:	e010      	b.n	800342a <HAL_RCC_OscConfig+0x2ba>
 8003408:	40021000 	.word	0x40021000
 800340c:	08007210 	.word	0x08007210
 8003410:	20000004 	.word	0x20000004
 8003414:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe fdf6 	bl	8002008 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e2bd      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342a:	4baf      	ldr	r3, [pc, #700]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x2a8>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fde6 	bl	8002008 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe fde2 	bl	8002008 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e2a9      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003452:	4ba5      	ldr	r3, [pc, #660]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x2d0>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d060      	beq.n	8003530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x310>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d119      	bne.n	80034ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d116      	bne.n	80034ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003480:	4b99      	ldr	r3, [pc, #612]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_OscConfig+0x328>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e286      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b93      	ldr	r3, [pc, #588]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	4990      	ldr	r1, [pc, #576]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ac:	e040      	b.n	8003530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d023      	beq.n	80034fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b6:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a8b      	ldr	r2, [pc, #556]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fe fda1 	bl	8002008 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fe fd9d 	bl	8002008 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e264      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034dc:	4b82      	ldr	r3, [pc, #520]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	497c      	ldr	r1, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
 80034fc:	e018      	b.n	8003530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a79      	ldr	r2, [pc, #484]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe fd7d 	bl	8002008 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe fd79 	bl	8002008 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e240      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003524:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d03c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	4a67      	ldr	r2, [pc, #412]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe fd58 	bl	8002008 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fe fd54 	bl	8002008 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e21b      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356e:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ef      	beq.n	800355c <HAL_RCC_OscConfig+0x3ec>
 800357c:	e01b      	b.n	80035b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357e:	4b5a      	ldr	r3, [pc, #360]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fe fd3b 	bl	8002008 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003596:	f7fe fd37 	bl	8002008 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1fe      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a8:	4b4f      	ldr	r3, [pc, #316]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ef      	bne.n	8003596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80a6 	beq.w	8003710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d4:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	4a43      	ldr	r2, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035de:	6593      	str	r3, [r2, #88]	; 0x58
 80035e0:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f0:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d118      	bne.n	800362e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003608:	f7fe fcfe 	bl	8002008 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7fe fcfa 	bl	8002008 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1c1      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003622:	4b32      	ldr	r3, [pc, #200]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d108      	bne.n	8003648 <HAL_RCC_OscConfig+0x4d8>
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003646:	e024      	b.n	8003692 <HAL_RCC_OscConfig+0x522>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b05      	cmp	r3, #5
 800364e:	d110      	bne.n	8003672 <HAL_RCC_OscConfig+0x502>
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003670:	e00f      	b.n	8003692 <HAL_RCC_OscConfig+0x522>
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800368a:	f023 0304 	bic.w	r3, r3, #4
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fe fcb5 	bl	8002008 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe fcb1 	bl	8002008 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e176      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ed      	beq.n	80036a2 <HAL_RCC_OscConfig+0x532>
 80036c6:	e01a      	b.n	80036fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fe fc9e 	bl	8002008 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ce:	e00f      	b.n	80036f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fe fc9a 	bl	8002008 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d906      	bls.n	80036f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e15f      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f0:	4baa      	ldr	r3, [pc, #680]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e8      	bne.n	80036d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fe:	7ffb      	ldrb	r3, [r7, #31]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4ba5      	ldr	r3, [pc, #660]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	4aa4      	ldr	r2, [pc, #656]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d03c      	beq.n	8003796 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003724:	4b9d      	ldr	r3, [pc, #628]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372a:	4a9c      	ldr	r2, [pc, #624]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fe fc68 	bl	8002008 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800373c:	f7fe fc64 	bl	8002008 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e12b      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800374e:	4b93      	ldr	r3, [pc, #588]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ef      	beq.n	800373c <HAL_RCC_OscConfig+0x5cc>
 800375c:	e01b      	b.n	8003796 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800375e:	4b8f      	ldr	r3, [pc, #572]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003764:	4a8d      	ldr	r2, [pc, #564]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fe fc4b 	bl	8002008 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003776:	f7fe fc47 	bl	8002008 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e10e      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003788:	4b84      	ldr	r3, [pc, #528]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 800378a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ef      	bne.n	8003776 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8102 	beq.w	80039a4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	f040 80c5 	bne.w	8003934 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037aa:	4b7c      	ldr	r3, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0203 	and.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d12c      	bne.n	8003818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	3b01      	subs	r3, #1
 80037ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d123      	bne.n	8003818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d11b      	bne.n	8003818 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d113      	bne.n	8003818 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	3b01      	subs	r3, #1
 80037fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d109      	bne.n	8003818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	3b01      	subs	r3, #1
 8003812:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d067      	beq.n	80038e8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b0c      	cmp	r3, #12
 800381c:	d062      	beq.n	80038e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0bb      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800382e:	4b5b      	ldr	r3, [pc, #364]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5a      	ldr	r2, [pc, #360]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003838:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800383a:	f7fe fbe5 	bl	8002008 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7fe fbe1 	bl	8002008 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0a8      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003854:	4b51      	ldr	r3, [pc, #324]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003860:	4b4e      	ldr	r3, [pc, #312]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <HAL_RCC_OscConfig+0x830>)
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003870:	3a01      	subs	r2, #1
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800387a:	0212      	lsls	r2, r2, #8
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003882:	0852      	lsrs	r2, r2, #1
 8003884:	3a01      	subs	r2, #1
 8003886:	0552      	lsls	r2, r2, #21
 8003888:	4311      	orrs	r1, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800388e:	0852      	lsrs	r2, r2, #1
 8003890:	3a01      	subs	r2, #1
 8003892:	0652      	lsls	r2, r2, #25
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800389a:	06d2      	lsls	r2, r2, #27
 800389c:	430a      	orrs	r2, r1
 800389e:	493f      	ldr	r1, [pc, #252]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038a4:	4b3d      	ldr	r3, [pc, #244]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3c      	ldr	r2, [pc, #240]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a39      	ldr	r2, [pc, #228]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038bc:	f7fe fba4 	bl	8002008 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe fba0 	bl	8002008 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e2:	e05f      	b.n	80039a4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e05e      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e8:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d157      	bne.n	80039a4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a28      	ldr	r2, [pc, #160]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a25      	ldr	r2, [pc, #148]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390c:	f7fe fb7c 	bl	8002008 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe fb78 	bl	8002008 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e03f      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x7a4>
 8003932:	e037      	b.n	80039a4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d02d      	beq.n	8003996 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a17      	ldr	r2, [pc, #92]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003944:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003958:	f023 0303 	bic.w	r3, r3, #3
 800395c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	4a0e      	ldr	r2, [pc, #56]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 8003964:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe fb4b 	bl	8002008 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003976:	f7fe fb47 	bl	8002008 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e00e      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <HAL_RCC_OscConfig+0x82c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f0      	bne.n	8003976 <HAL_RCC_OscConfig+0x806>
 8003994:	e006      	b.n	80039a4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e005      	b.n	80039a6 <HAL_RCC_OscConfig+0x836>
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0c8      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <HAL_RCC_ClockConfig+0x1b0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d910      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_RCC_ClockConfig+0x1b0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	4961      	ldr	r1, [pc, #388]	; (8003b60 <HAL_RCC_ClockConfig+0x1b0>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b5f      	ldr	r3, [pc, #380]	; (8003b60 <HAL_RCC_ClockConfig+0x1b0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0b0      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d04c      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d107      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a08:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d121      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e09e      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a20:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d115      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e092      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a38:	4b4a      	ldr	r3, [pc, #296]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e086      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a48:	4b46      	ldr	r3, [pc, #280]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e07e      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 0203 	bic.w	r2, r3, #3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	493f      	ldr	r1, [pc, #252]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6a:	f7fe facd 	bl	8002008 <HAL_GetTick>
 8003a6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a72:	f7fe fac9 	bl	8002008 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e066      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 020c 	and.w	r2, r3, #12
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d1eb      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	492c      	ldr	r1, [pc, #176]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_RCC_ClockConfig+0x1b0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d210      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <HAL_RCC_ClockConfig+0x1b0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 0207 	bic.w	r2, r3, #7
 8003ace:	4924      	ldr	r1, [pc, #144]	; (8003b60 <HAL_RCC_ClockConfig+0x1b0>)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <HAL_RCC_ClockConfig+0x1b0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e036      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4918      	ldr	r1, [pc, #96]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4910      	ldr	r1, [pc, #64]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b26:	f000 f825 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <HAL_RCC_ClockConfig+0x1b4>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490c      	ldr	r1, [pc, #48]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fa0c 	bl	8001f68 <HAL_InitTick>
 8003b50:	4603      	mov	r3, r0
 8003b52:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b54:	7afb      	ldrb	r3, [r7, #11]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40022000 	.word	0x40022000
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08007210 	.word	0x08007210
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	20000008 	.word	0x20000008

08003b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b82:	4b3e      	ldr	r3, [pc, #248]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d121      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d11e      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ba8:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d102      	bne.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bec:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e004      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bf8:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d134      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_GetSysClockFreq+0xa6>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d003      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0xac>
 8003c18:	e005      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c1c:	617b      	str	r3, [r7, #20]
      break;
 8003c1e:	e005      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c22:	617b      	str	r3, [r7, #20]
      break;
 8003c24:	e002      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	617b      	str	r3, [r7, #20]
      break;
 8003c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	3301      	adds	r3, #1
 8003c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	fb02 f203 	mul.w	r2, r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	0e5b      	lsrs	r3, r3, #25
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	08007228 	.word	0x08007228
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	007a1200 	.word	0x007a1200

08003c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000004 	.word	0x20000004

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ca8:	f7ff fff0 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4904      	ldr	r1, [pc, #16]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08007220 	.word	0x08007220

08003cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cd4:	f7ff ffda 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0adb      	lsrs	r3, r3, #11
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4904      	ldr	r1, [pc, #16]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08007220 	.word	0x08007220

08003cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d08:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d14:	f7ff f9c8 	bl	80030a8 <HAL_PWREx_GetVoltageRange>
 8003d18:	6178      	str	r0, [r7, #20]
 8003d1a:	e014      	b.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d26:	6593      	str	r3, [r2, #88]	; 0x58
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d34:	f7ff f9b8 	bl	80030a8 <HAL_PWREx_GetVoltageRange>
 8003d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4c:	d10b      	bne.n	8003d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d919      	bls.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2ba0      	cmp	r3, #160	; 0xa0
 8003d58:	d902      	bls.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	e013      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d60:	2301      	movs	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	e010      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b80      	cmp	r3, #128	; 0x80
 8003d6a:	d902      	bls.n	8003d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	e00a      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d102      	bne.n	8003d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d78:	2302      	movs	r3, #2
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	e004      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b70      	cmp	r3, #112	; 0x70
 8003d82:	d101      	bne.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d84:	2301      	movs	r3, #1
 8003d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 0207 	bic.w	r2, r3, #7
 8003d90:	4909      	ldr	r1, [pc, #36]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d001      	beq.n	8003daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40022000 	.word	0x40022000

08003dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dc8:	2300      	movs	r3, #0
 8003dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d031      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003de0:	d01a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003de6:	d814      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df0:	d10f      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003df2:	4bac      	ldr	r3, [pc, #688]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4aab      	ldr	r2, [pc, #684]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dfe:	e00c      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f9cc 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e10:	e003      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	74fb      	strb	r3, [r7, #19]
      break;
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e20:	4ba0      	ldr	r3, [pc, #640]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	499d      	ldr	r1, [pc, #628]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e36:	e001      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8099 	beq.w	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e4e:	4b95      	ldr	r3, [pc, #596]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b8f      	ldr	r3, [pc, #572]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	4a8e      	ldr	r2, [pc, #568]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e70:	4b8c      	ldr	r3, [pc, #560]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e80:	4b89      	ldr	r3, [pc, #548]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a88      	ldr	r2, [pc, #544]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e8c:	f7fe f8bc 	bl	8002008 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e92:	e009      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e94:	f7fe f8b8 	bl	8002008 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d902      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ea8:	4b7f      	ldr	r3, [pc, #508]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ef      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d155      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eba:	4b7a      	ldr	r3, [pc, #488]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d019      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ed6:	4b73      	ldr	r3, [pc, #460]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ee2:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	4a6e      	ldr	r2, [pc, #440]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef2:	4b6c      	ldr	r3, [pc, #432]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	4a6a      	ldr	r2, [pc, #424]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f02:	4a68      	ldr	r2, [pc, #416]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d016      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fe f878 	bl	8002008 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fe f874 	bl	8002008 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d902      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	74fb      	strb	r3, [r7, #19]
            break;
 8003f32:	e006      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f34:	4b5b      	ldr	r3, [pc, #364]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0ec      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f48:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	4953      	ldr	r1, [pc, #332]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f5e:	e004      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	74bb      	strb	r3, [r7, #18]
 8003f64:	e001      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f6a:	7c7b      	ldrb	r3, [r7, #17]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d105      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f70:	4b4c      	ldr	r3, [pc, #304]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	4a4b      	ldr	r2, [pc, #300]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f88:	4b46      	ldr	r3, [pc, #280]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4943      	ldr	r1, [pc, #268]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003faa:	4b3e      	ldr	r3, [pc, #248]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f023 020c 	bic.w	r2, r3, #12
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	493a      	ldr	r1, [pc, #232]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fcc:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	4932      	ldr	r1, [pc, #200]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fee:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	4929      	ldr	r1, [pc, #164]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004010:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	4921      	ldr	r1, [pc, #132]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004032:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	4918      	ldr	r1, [pc, #96]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	4910      	ldr	r1, [pc, #64]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d02c      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	4907      	ldr	r1, [pc, #28]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004096:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800409c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a0:	60d3      	str	r3, [r2, #12]
 80040a2:	e015      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f871 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d028      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040dc:	4b30      	ldr	r3, [pc, #192]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	492d      	ldr	r1, [pc, #180]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fa:	d106      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004106:	60d3      	str	r3, [r2, #12]
 8004108:	e011      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004112:	d10c      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f842 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01c      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004148:	4915      	ldr	r1, [pc, #84]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004158:	d10c      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f81f 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	4904      	ldr	r1, [pc, #16]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004196:	7cbb      	ldrb	r3, [r7, #18]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000

080041a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041b2:	4b74      	ldr	r3, [pc, #464]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d018      	beq.n	80041f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041be:	4b71      	ldr	r3, [pc, #452]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0203 	and.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d10d      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
       ||
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041d6:	4b6b      	ldr	r3, [pc, #428]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
       ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d047      	beq.n	800427a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	e044      	b.n	800427a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d018      	beq.n	800422a <RCCEx_PLLSAI1_Config+0x86>
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d825      	bhi.n	8004248 <RCCEx_PLLSAI1_Config+0xa4>
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d002      	beq.n	8004206 <RCCEx_PLLSAI1_Config+0x62>
 8004200:	2b02      	cmp	r3, #2
 8004202:	d009      	beq.n	8004218 <RCCEx_PLLSAI1_Config+0x74>
 8004204:	e020      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004206:	4b5f      	ldr	r3, [pc, #380]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11d      	bne.n	800424e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004216:	e01a      	b.n	800424e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004218:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004228:	e013      	b.n	8004252 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800422a:	4b56      	ldr	r3, [pc, #344]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004236:	4b53      	ldr	r3, [pc, #332]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004246:	e006      	b.n	8004256 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      break;
 800424c:	e004      	b.n	8004258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004256:	bf00      	nop
    }

    if(status == HAL_OK)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10d      	bne.n	800427a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800425e:	4b49      	ldr	r3, [pc, #292]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	430b      	orrs	r3, r1
 8004274:	4943      	ldr	r1, [pc, #268]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d17c      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004280:	4b40      	ldr	r3, [pc, #256]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800428a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428c:	f7fd febc 	bl	8002008 <HAL_GetTick>
 8004290:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004292:	e009      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004294:	f7fd feb8 	bl	8002008 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d902      	bls.n	80042a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	73fb      	strb	r3, [r7, #15]
        break;
 80042a6:	e005      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ef      	bne.n	8004294 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d15f      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d110      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042c0:	4b30      	ldr	r3, [pc, #192]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80042c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6892      	ldr	r2, [r2, #8]
 80042d0:	0211      	lsls	r1, r2, #8
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	06d2      	lsls	r2, r2, #27
 80042d8:	430a      	orrs	r2, r1
 80042da:	492a      	ldr	r1, [pc, #168]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	610b      	str	r3, [r1, #16]
 80042e0:	e027      	b.n	8004332 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d112      	bne.n	800430e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e8:	4b26      	ldr	r3, [pc, #152]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6892      	ldr	r2, [r2, #8]
 80042f8:	0211      	lsls	r1, r2, #8
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6912      	ldr	r2, [r2, #16]
 80042fe:	0852      	lsrs	r2, r2, #1
 8004300:	3a01      	subs	r2, #1
 8004302:	0552      	lsls	r2, r2, #21
 8004304:	430a      	orrs	r2, r1
 8004306:	491f      	ldr	r1, [pc, #124]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	610b      	str	r3, [r1, #16]
 800430c:	e011      	b.n	8004332 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004316:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6892      	ldr	r2, [r2, #8]
 800431e:	0211      	lsls	r1, r2, #8
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6952      	ldr	r2, [r2, #20]
 8004324:	0852      	lsrs	r2, r2, #1
 8004326:	3a01      	subs	r2, #1
 8004328:	0652      	lsls	r2, r2, #25
 800432a:	430a      	orrs	r2, r1
 800432c:	4915      	ldr	r1, [pc, #84]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432e:	4313      	orrs	r3, r2
 8004330:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a13      	ldr	r2, [pc, #76]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004338:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800433c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433e:	f7fd fe63 	bl	8002008 <HAL_GetTick>
 8004342:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004344:	e009      	b.n	800435a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004346:	f7fd fe5f 	bl	8002008 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d902      	bls.n	800435a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	73fb      	strb	r3, [r7, #15]
          break;
 8004358:	e005      	b.n	8004366 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ef      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000

08004388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e095      	b.n	80044c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043aa:	d009      	beq.n	80043c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	61da      	str	r2, [r3, #28]
 80043b2:	e005      	b.n	80043c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fd fbc0 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004400:	d902      	bls.n	8004408 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e002      	b.n	800440e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800440c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004416:	d007      	beq.n	8004428 <HAL_SPI_Init+0xa0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004420:	d002      	beq.n	8004428 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	ea42 0103 	orr.w	r1, r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	0c1b      	lsrs	r3, r3, #16
 8004484:	f003 0204 	and.w	r2, r3, #4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044a4:	ea42 0103 	orr.w	r1, r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_SPI_Transmit+0x22>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e158      	b.n	80047a2 <HAL_SPI_Transmit+0x2d4>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f8:	f7fd fd86 	bl	8002008 <HAL_GetTick>
 80044fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d002      	beq.n	8004514 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004512:	e13d      	b.n	8004790 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_SPI_Transmit+0x52>
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004524:	e134      	b.n	8004790 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2203      	movs	r2, #3
 800452a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004570:	d10f      	bne.n	8004592 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004580:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004590:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d007      	beq.n	80045b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b8:	d94b      	bls.n	8004652 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Transmit+0xfa>
 80045c2:	8afb      	ldrh	r3, [r7, #22]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d13e      	bne.n	8004646 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	881a      	ldrh	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	1c9a      	adds	r2, r3, #2
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045ec:	e02b      	b.n	8004646 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d112      	bne.n	8004622 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	881a      	ldrh	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	1c9a      	adds	r2, r3, #2
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004620:	e011      	b.n	8004646 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004622:	f7fd fcf1 	bl	8002008 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d803      	bhi.n	800463a <HAL_SPI_Transmit+0x16c>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d102      	bne.n	8004640 <HAL_SPI_Transmit+0x172>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004644:	e0a4      	b.n	8004790 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ce      	bne.n	80045ee <HAL_SPI_Transmit+0x120>
 8004650:	e07c      	b.n	800474c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_SPI_Transmit+0x192>
 800465a:	8afb      	ldrh	r3, [r7, #22]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d170      	bne.n	8004742 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d912      	bls.n	8004690 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	1c9a      	adds	r2, r3, #2
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b02      	subs	r3, #2
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800468e:	e058      	b.n	8004742 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	7812      	ldrb	r2, [r2, #0]
 800469c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80046b6:	e044      	b.n	8004742 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d12b      	bne.n	800471e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d912      	bls.n	80046f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b02      	subs	r3, #2
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f4:	e025      	b.n	8004742 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800471c:	e011      	b.n	8004742 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800471e:	f7fd fc73 	bl	8002008 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d803      	bhi.n	8004736 <HAL_SPI_Transmit+0x268>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d102      	bne.n	800473c <HAL_SPI_Transmit+0x26e>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004740:	e026      	b.n	8004790 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1b5      	bne.n	80046b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	6839      	ldr	r1, [r7, #0]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f945 	bl	80049e0 <SPI_EndRxTxTransaction>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e000      	b.n	8004790 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800478e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047bc:	f7fd fc24 	bl	8002008 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	4413      	add	r3, r2
 80047ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047cc:	f7fd fc1c 	bl	8002008 <HAL_GetTick>
 80047d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047d2:	4b39      	ldr	r3, [pc, #228]	; (80048b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	015b      	lsls	r3, r3, #5
 80047d8:	0d1b      	lsrs	r3, r3, #20
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	fb02 f303 	mul.w	r3, r2, r3
 80047e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047e2:	e054      	b.n	800488e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d050      	beq.n	800488e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ec:	f7fd fc0c 	bl	8002008 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d902      	bls.n	8004802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d13d      	bne.n	800487e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d111      	bne.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	d004      	beq.n	8004830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d107      	bne.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800483e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004848:	d10f      	bne.n	800486a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e017      	b.n	80048ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	3b01      	subs	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d19b      	bne.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000004 	.word	0x20000004

080048bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048ca:	f7fd fb9d 	bl	8002008 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	4413      	add	r3, r2
 80048d8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048da:	f7fd fb95 	bl	8002008 <HAL_GetTick>
 80048de:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048e0:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	00da      	lsls	r2, r3, #3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	0d1b      	lsrs	r3, r3, #20
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80048f8:	e062      	b.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004900:	d109      	bne.n	8004916 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004914:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d050      	beq.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800491e:	f7fd fb73 	bl	8002008 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	429a      	cmp	r2, r3
 800492c:	d902      	bls.n	8004934 <SPI_WaitFifoStateUntilTimeout+0x78>
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d13d      	bne.n	80049b0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004942:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494c:	d111      	bne.n	8004972 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004956:	d004      	beq.n	8004962 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d107      	bne.n	8004972 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497a:	d10f      	bne.n	800499c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800499a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e010      	b.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3b01      	subs	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d194      	bne.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000004 	.word	0x20000004

080049e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff5f 	bl	80048bc <SPI_WaitFifoStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e027      	b.n	8004a64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7ff fec4 	bl	80047ac <SPI_WaitFlagStateUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e014      	b.n	8004a64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff ff38 	bl	80048bc <SPI_WaitFifoStateUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e000      	b.n	8004a64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e049      	b.n	8004b12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd f8c4 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 f9dc 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d001      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e03b      	b.n	8004bac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0x4e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0x4e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <HAL_TIM_Base_Start_IT+0xa0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d115      	bne.n	8004b96 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b06      	cmp	r3, #6
 8004b7a:	d015      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x8c>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b82:	d011      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b94:	e008      	b.n	8004ba8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	00010007 	.word	0x00010007

08004bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0202 	mvn.w	r2, #2
 8004bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f90f 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f901 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f912 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d122      	bne.n	8004c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0204 	mvn.w	r2, #4
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8e5 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f8d7 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8e8 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d122      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0208 	mvn.w	r2, #8
 8004c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f8bb 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e005      	b.n	8004cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8ad 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f8be 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d122      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d11b      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0210 	mvn.w	r2, #16
 8004cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f891 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f883 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f894 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d10e      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0201 	mvn.w	r2, #1
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f85d 	bl	8004e02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d10e      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b80      	cmp	r3, #128	; 0x80
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f94e 	bl	8005010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d10e      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b80      	cmp	r3, #128	; 0x80
 8004d90:	d107      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f941 	bl	8005024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d10e      	bne.n	8004dce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d107      	bne.n	8004dce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f842 	bl	8004e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d10e      	bne.n	8004dfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d107      	bne.n	8004dfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f06f 0220 	mvn.w	r2, #32
 8004df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f901 	bl	8004ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a2a      	ldr	r2, [pc, #168]	; (8004f24 <TIM_Base_SetConfig+0xbc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0x20>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e86:	d108      	bne.n	8004e9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a21      	ldr	r2, [pc, #132]	; (8004f24 <TIM_Base_SetConfig+0xbc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_Base_SetConfig+0x52>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0x52>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <TIM_Base_SetConfig+0xc0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0x52>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <TIM_Base_SetConfig+0xc4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <TIM_Base_SetConfig+0xbc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0xa0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <TIM_Base_SetConfig+0xc0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0xa0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <TIM_Base_SetConfig+0xc4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d103      	bne.n	8004f10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	615a      	str	r2, [r3, #20]
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e04f      	b.n	8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d10c      	bne.n	8004fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40014000 	.word	0x40014000

08004ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e040      	b.n	80050cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc fe06 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8c0 	bl	80051fc <UART_SetConfig>
 800507c:	4603      	mov	r3, r0
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e022      	b.n	80050cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fac0 	bl	8005614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb47 	bl	8005758 <UART_CheckIdleState>
 80050ca:	4603      	mov	r3, r0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	f040 8082 	bne.w	80051f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_UART_Transmit+0x26>
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07a      	b.n	80051f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_UART_Transmit+0x38>
 8005108:	2302      	movs	r3, #2
 800510a:	e073      	b.n	80051f4 <HAL_UART_Transmit+0x120>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2221      	movs	r2, #33	; 0x21
 8005120:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005122:	f7fc ff71 	bl	8002008 <HAL_GetTick>
 8005126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005140:	d108      	bne.n	8005154 <HAL_UART_Transmit+0x80>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d104      	bne.n	8005154 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e003      	b.n	800515c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005164:	e02d      	b.n	80051c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2200      	movs	r2, #0
 800516e:	2180      	movs	r1, #128	; 0x80
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fb3a 	bl	80057ea <UART_WaitOnFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e039      	b.n	80051f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	881a      	ldrh	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005192:	b292      	uxth	r2, r2
 8005194:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	3302      	adds	r3, #2
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	e008      	b.n	80051b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	b292      	uxth	r2, r2
 80051a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1cb      	bne.n	8005166 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2140      	movs	r1, #64	; 0x40
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fb06 	bl	80057ea <UART_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e005      	b.n	80051f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	4313      	orrs	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4baf      	ldr	r3, [pc, #700]	; (80054e4 <UART_SetConfig+0x2e8>)
 8005228:	4013      	ands	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	69f9      	ldr	r1, [r7, #28]
 8005230:	430b      	orrs	r3, r1
 8005232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4aa4      	ldr	r2, [pc, #656]	; (80054e8 <UART_SetConfig+0x2ec>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	4313      	orrs	r3, r2
 8005262:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	430a      	orrs	r2, r1
 8005276:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a9b      	ldr	r2, [pc, #620]	; (80054ec <UART_SetConfig+0x2f0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d121      	bne.n	80052c6 <UART_SetConfig+0xca>
 8005282:	4b9b      	ldr	r3, [pc, #620]	; (80054f0 <UART_SetConfig+0x2f4>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	2b03      	cmp	r3, #3
 800528e:	d817      	bhi.n	80052c0 <UART_SetConfig+0xc4>
 8005290:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <UART_SetConfig+0x9c>)
 8005292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005296:	bf00      	nop
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052b5 	.word	0x080052b5
 80052a0:	080052af 	.word	0x080052af
 80052a4:	080052bb 	.word	0x080052bb
 80052a8:	2301      	movs	r3, #1
 80052aa:	76fb      	strb	r3, [r7, #27]
 80052ac:	e070      	b.n	8005390 <UART_SetConfig+0x194>
 80052ae:	2302      	movs	r3, #2
 80052b0:	76fb      	strb	r3, [r7, #27]
 80052b2:	e06d      	b.n	8005390 <UART_SetConfig+0x194>
 80052b4:	2304      	movs	r3, #4
 80052b6:	76fb      	strb	r3, [r7, #27]
 80052b8:	e06a      	b.n	8005390 <UART_SetConfig+0x194>
 80052ba:	2308      	movs	r3, #8
 80052bc:	76fb      	strb	r3, [r7, #27]
 80052be:	e067      	b.n	8005390 <UART_SetConfig+0x194>
 80052c0:	2310      	movs	r3, #16
 80052c2:	76fb      	strb	r3, [r7, #27]
 80052c4:	e064      	b.n	8005390 <UART_SetConfig+0x194>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a8a      	ldr	r2, [pc, #552]	; (80054f4 <UART_SetConfig+0x2f8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d132      	bne.n	8005336 <UART_SetConfig+0x13a>
 80052d0:	4b87      	ldr	r3, [pc, #540]	; (80054f0 <UART_SetConfig+0x2f4>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b0c      	cmp	r3, #12
 80052dc:	d828      	bhi.n	8005330 <UART_SetConfig+0x134>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0xe8>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	08005319 	.word	0x08005319
 80052e8:	08005331 	.word	0x08005331
 80052ec:	08005331 	.word	0x08005331
 80052f0:	08005331 	.word	0x08005331
 80052f4:	08005325 	.word	0x08005325
 80052f8:	08005331 	.word	0x08005331
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005331 	.word	0x08005331
 8005304:	0800531f 	.word	0x0800531f
 8005308:	08005331 	.word	0x08005331
 800530c:	08005331 	.word	0x08005331
 8005310:	08005331 	.word	0x08005331
 8005314:	0800532b 	.word	0x0800532b
 8005318:	2300      	movs	r3, #0
 800531a:	76fb      	strb	r3, [r7, #27]
 800531c:	e038      	b.n	8005390 <UART_SetConfig+0x194>
 800531e:	2302      	movs	r3, #2
 8005320:	76fb      	strb	r3, [r7, #27]
 8005322:	e035      	b.n	8005390 <UART_SetConfig+0x194>
 8005324:	2304      	movs	r3, #4
 8005326:	76fb      	strb	r3, [r7, #27]
 8005328:	e032      	b.n	8005390 <UART_SetConfig+0x194>
 800532a:	2308      	movs	r3, #8
 800532c:	76fb      	strb	r3, [r7, #27]
 800532e:	e02f      	b.n	8005390 <UART_SetConfig+0x194>
 8005330:	2310      	movs	r3, #16
 8005332:	76fb      	strb	r3, [r7, #27]
 8005334:	e02c      	b.n	8005390 <UART_SetConfig+0x194>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a6b      	ldr	r2, [pc, #428]	; (80054e8 <UART_SetConfig+0x2ec>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d125      	bne.n	800538c <UART_SetConfig+0x190>
 8005340:	4b6b      	ldr	r3, [pc, #428]	; (80054f0 <UART_SetConfig+0x2f4>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800534a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800534e:	d017      	beq.n	8005380 <UART_SetConfig+0x184>
 8005350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005354:	d817      	bhi.n	8005386 <UART_SetConfig+0x18a>
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d00b      	beq.n	8005374 <UART_SetConfig+0x178>
 800535c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005360:	d811      	bhi.n	8005386 <UART_SetConfig+0x18a>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <UART_SetConfig+0x172>
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536a:	d006      	beq.n	800537a <UART_SetConfig+0x17e>
 800536c:	e00b      	b.n	8005386 <UART_SetConfig+0x18a>
 800536e:	2300      	movs	r3, #0
 8005370:	76fb      	strb	r3, [r7, #27]
 8005372:	e00d      	b.n	8005390 <UART_SetConfig+0x194>
 8005374:	2302      	movs	r3, #2
 8005376:	76fb      	strb	r3, [r7, #27]
 8005378:	e00a      	b.n	8005390 <UART_SetConfig+0x194>
 800537a:	2304      	movs	r3, #4
 800537c:	76fb      	strb	r3, [r7, #27]
 800537e:	e007      	b.n	8005390 <UART_SetConfig+0x194>
 8005380:	2308      	movs	r3, #8
 8005382:	76fb      	strb	r3, [r7, #27]
 8005384:	e004      	b.n	8005390 <UART_SetConfig+0x194>
 8005386:	2310      	movs	r3, #16
 8005388:	76fb      	strb	r3, [r7, #27]
 800538a:	e001      	b.n	8005390 <UART_SetConfig+0x194>
 800538c:	2310      	movs	r3, #16
 800538e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a54      	ldr	r2, [pc, #336]	; (80054e8 <UART_SetConfig+0x2ec>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d173      	bne.n	8005482 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800539a:	7efb      	ldrb	r3, [r7, #27]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d824      	bhi.n	80053ea <UART_SetConfig+0x1ee>
 80053a0:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0x1ac>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053eb 	.word	0x080053eb
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	080053eb 	.word	0x080053eb
 80053b8:	080053db 	.word	0x080053db
 80053bc:	080053eb 	.word	0x080053eb
 80053c0:	080053eb 	.word	0x080053eb
 80053c4:	080053eb 	.word	0x080053eb
 80053c8:	080053e3 	.word	0x080053e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7fe fc6a 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 80053d0:	6178      	str	r0, [r7, #20]
        break;
 80053d2:	e00f      	b.n	80053f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d4:	4b48      	ldr	r3, [pc, #288]	; (80054f8 <UART_SetConfig+0x2fc>)
 80053d6:	617b      	str	r3, [r7, #20]
        break;
 80053d8:	e00c      	b.n	80053f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053da:	f7fe fbcb 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 80053de:	6178      	str	r0, [r7, #20]
        break;
 80053e0:	e008      	b.n	80053f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e6:	617b      	str	r3, [r7, #20]
        break;
 80053e8:	e004      	b.n	80053f4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	76bb      	strb	r3, [r7, #26]
        break;
 80053f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80fe 	beq.w	80055f8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	429a      	cmp	r2, r3
 800540a:	d305      	bcc.n	8005418 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	429a      	cmp	r2, r3
 8005416:	d902      	bls.n	800541e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	76bb      	strb	r3, [r7, #26]
 800541c:	e0ec      	b.n	80055f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	4618      	mov	r0, r3
 8005422:	f04f 0100 	mov.w	r1, #0
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	020b      	lsls	r3, r1, #8
 8005430:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005434:	0202      	lsls	r2, r0, #8
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	6849      	ldr	r1, [r1, #4]
 800543a:	0849      	lsrs	r1, r1, #1
 800543c:	4608      	mov	r0, r1
 800543e:	f04f 0100 	mov.w	r1, #0
 8005442:	1814      	adds	r4, r2, r0
 8005444:	eb43 0501 	adc.w	r5, r3, r1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	461a      	mov	r2, r3
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	4620      	mov	r0, r4
 8005454:	4629      	mov	r1, r5
 8005456:	f7fb f8cf 	bl	80005f8 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4613      	mov	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005468:	d308      	bcc.n	800547c <UART_SetConfig+0x280>
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005470:	d204      	bcs.n	800547c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	60da      	str	r2, [r3, #12]
 800547a:	e0bd      	b.n	80055f8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	76bb      	strb	r3, [r7, #26]
 8005480:	e0ba      	b.n	80055f8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800548a:	d168      	bne.n	800555e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800548c:	7efb      	ldrb	r3, [r7, #27]
 800548e:	2b08      	cmp	r3, #8
 8005490:	d834      	bhi.n	80054fc <UART_SetConfig+0x300>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <UART_SetConfig+0x29c>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054bd 	.word	0x080054bd
 800549c:	080054c5 	.word	0x080054c5
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	080054fd 	.word	0x080054fd
 80054a8:	080054d3 	.word	0x080054d3
 80054ac:	080054fd 	.word	0x080054fd
 80054b0:	080054fd 	.word	0x080054fd
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	080054db 	.word	0x080054db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054bc:	f7fe fbf2 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 80054c0:	6178      	str	r0, [r7, #20]
        break;
 80054c2:	e020      	b.n	8005506 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c4:	f7fe fc04 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 80054c8:	6178      	str	r0, [r7, #20]
        break;
 80054ca:	e01c      	b.n	8005506 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <UART_SetConfig+0x2fc>)
 80054ce:	617b      	str	r3, [r7, #20]
        break;
 80054d0:	e019      	b.n	8005506 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d2:	f7fe fb4f 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 80054d6:	6178      	str	r0, [r7, #20]
        break;
 80054d8:	e015      	b.n	8005506 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054de:	617b      	str	r3, [r7, #20]
        break;
 80054e0:	e011      	b.n	8005506 <UART_SetConfig+0x30a>
 80054e2:	bf00      	nop
 80054e4:	efff69f3 	.word	0xefff69f3
 80054e8:	40008000 	.word	0x40008000
 80054ec:	40013800 	.word	0x40013800
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40004400 	.word	0x40004400
 80054f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	76bb      	strb	r3, [r7, #26]
        break;
 8005504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d075      	beq.n	80055f8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	005a      	lsls	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	085b      	lsrs	r3, r3, #1
 8005516:	441a      	add	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	b29b      	uxth	r3, r3
 8005522:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b0f      	cmp	r3, #15
 8005528:	d916      	bls.n	8005558 <UART_SetConfig+0x35c>
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005530:	d212      	bcs.n	8005558 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f023 030f 	bic.w	r3, r3, #15
 800553a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	b29a      	uxth	r2, r3
 8005548:	89fb      	ldrh	r3, [r7, #14]
 800554a:	4313      	orrs	r3, r2
 800554c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	89fa      	ldrh	r2, [r7, #14]
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	e04f      	b.n	80055f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	76bb      	strb	r3, [r7, #26]
 800555c:	e04c      	b.n	80055f8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800555e:	7efb      	ldrb	r3, [r7, #27]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d828      	bhi.n	80055b6 <UART_SetConfig+0x3ba>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <UART_SetConfig+0x370>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	08005591 	.word	0x08005591
 8005570:	08005599 	.word	0x08005599
 8005574:	080055a1 	.word	0x080055a1
 8005578:	080055b7 	.word	0x080055b7
 800557c:	080055a7 	.word	0x080055a7
 8005580:	080055b7 	.word	0x080055b7
 8005584:	080055b7 	.word	0x080055b7
 8005588:	080055b7 	.word	0x080055b7
 800558c:	080055af 	.word	0x080055af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005590:	f7fe fb88 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8005594:	6178      	str	r0, [r7, #20]
        break;
 8005596:	e013      	b.n	80055c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005598:	f7fe fb9a 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 800559c:	6178      	str	r0, [r7, #20]
        break;
 800559e:	e00f      	b.n	80055c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a0:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <UART_SetConfig+0x414>)
 80055a2:	617b      	str	r3, [r7, #20]
        break;
 80055a4:	e00c      	b.n	80055c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a6:	f7fe fae5 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 80055aa:	6178      	str	r0, [r7, #20]
        break;
 80055ac:	e008      	b.n	80055c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b2:	617b      	str	r3, [r7, #20]
        break;
 80055b4:	e004      	b.n	80055c0 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	76bb      	strb	r3, [r7, #26]
        break;
 80055be:	bf00      	nop
    }

    if (pclk != 0U)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	085a      	lsrs	r2, r3, #1
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	441a      	add	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	b29b      	uxth	r3, r3
 80055da:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	d908      	bls.n	80055f4 <UART_SetConfig+0x3f8>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d204      	bcs.n	80055f4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	e001      	b.n	80055f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005604:	7ebb      	ldrb	r3, [r7, #26]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3720      	adds	r7, #32
 800560a:	46bd      	mov	sp, r7
 800560c:	bdb0      	pop	{r4, r5, r7, pc}
 800560e:	bf00      	nop
 8005610:	00f42400 	.word	0x00f42400

08005614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005712:	d10a      	bne.n	800572a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	605a      	str	r2, [r3, #4]
  }
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005768:	f7fc fc4e 	bl	8002008 <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b08      	cmp	r3, #8
 800577a:	d10e      	bne.n	800579a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f82d 	bl	80057ea <UART_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e023      	b.n	80057e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d10e      	bne.n	80057c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f817 	bl	80057ea <UART_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e00d      	b.n	80057e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	4613      	mov	r3, r2
 80057f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fa:	e05e      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d05a      	beq.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005804:	f7fc fc00 	bl	8002008 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	429a      	cmp	r2, r3
 8005812:	d302      	bcc.n	800581a <UART_WaitOnFlagUntilTimeout+0x30>
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d11b      	bne.n	8005852 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005828:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e043      	b.n	80058da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02c      	beq.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586e:	d124      	bne.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005878:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005888:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e00f      	b.n	80058da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4013      	ands	r3, r2
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d091      	beq.n	80057fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	af00      	add	r7, sp, #0
  LED_OFF;
 80058e6:	2200      	movs	r2, #0
 80058e8:	2120      	movs	r1, #32
 80058ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ee:	f7fc fe37 	bl	8002560 <HAL_GPIO_WritePin>
}
 80058f2:	bf00      	nop
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af04      	add	r7, sp, #16
 80058fe:	4603      	mov	r3, r0
 8005900:	80fb      	strh	r3, [r7, #6]
 8005902:	460b      	mov	r3, r1
 8005904:	717b      	strb	r3, [r7, #5]
 8005906:	4613      	mov	r3, r2
 8005908:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800590e:	797b      	ldrb	r3, [r7, #5]
 8005910:	b29a      	uxth	r2, r3
 8005912:	88f9      	ldrh	r1, [r7, #6]
 8005914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	2301      	movs	r3, #1
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	2301      	movs	r3, #1
 8005924:	4806      	ldr	r0, [pc, #24]	; (8005940 <I2Cx_WriteData+0x48>)
 8005926:	f7fc fec3 	bl	80026b0 <HAL_I2C_Mem_Write>
 800592a:	4603      	mov	r3, r0
 800592c:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <I2Cx_WriteData+0x40>
 8005934:	f7ff ffd5 	bl	80058e2 <Error>
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	2000009c 	.word	0x2000009c

08005944 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af04      	add	r7, sp, #16
 800594a:	4603      	mov	r3, r0
 800594c:	460a      	mov	r2, r1
 800594e:	80fb      	strh	r3, [r7, #6]
 8005950:	4613      	mov	r3, r2
 8005952:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 800595c:	797b      	ldrb	r3, [r7, #5]
 800595e:	b29a      	uxth	r2, r3
 8005960:	88f9      	ldrh	r1, [r7, #6]
 8005962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005966:	9302      	str	r3, [sp, #8]
 8005968:	2301      	movs	r3, #1
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	f107 030e 	add.w	r3, r7, #14
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	2301      	movs	r3, #1
 8005974:	4807      	ldr	r0, [pc, #28]	; (8005994 <I2Cx_ReadData+0x50>)
 8005976:	f7fc ffaf 	bl	80028d8 <HAL_I2C_Mem_Read>
 800597a:	4603      	mov	r3, r0
 800597c:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <I2Cx_ReadData+0x44>
 8005984:	f7ff ffad 	bl	80058e2 <Error>
  return value;
 8005988:	7bbb      	ldrb	r3, [r7, #14]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000009c 	.word	0x2000009c

08005998 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af04      	add	r7, sp, #16
 800599e:	4603      	mov	r3, r0
 80059a0:	603a      	str	r2, [r7, #0]
 80059a2:	80fb      	strh	r3, [r7, #6]
 80059a4:	460b      	mov	r3, r1
 80059a6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 80059ac:	797b      	ldrb	r3, [r7, #5]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	88f9      	ldrh	r1, [r7, #6]
 80059b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059b6:	9302      	str	r3, [sp, #8]
 80059b8:	2302      	movs	r3, #2
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2301      	movs	r3, #1
 80059c2:	4807      	ldr	r0, [pc, #28]	; (80059e0 <I2Cx_ReadData16+0x48>)
 80059c4:	f7fc ff88 	bl	80028d8 <HAL_I2C_Mem_Read>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2Cx_ReadData16+0x3e>
 80059d2:	f7ff ff86 	bl	80058e2 <Error>
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	2000009c 	.word	0x2000009c

080059e4 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af04      	add	r7, sp, #16
 80059ea:	4603      	mov	r3, r0
 80059ec:	603a      	str	r2, [r7, #0]
 80059ee:	80fb      	strh	r3, [r7, #6]
 80059f0:	460b      	mov	r3, r1
 80059f2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 80059f8:	797b      	ldrb	r3, [r7, #5]
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	88f9      	ldrh	r1, [r7, #6]
 80059fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a02:	9302      	str	r3, [sp, #8]
 8005a04:	2303      	movs	r3, #3
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4807      	ldr	r0, [pc, #28]	; (8005a2c <I2Cx_ReadData24+0x48>)
 8005a10:	f7fc ff62 	bl	80028d8 <HAL_I2C_Mem_Read>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <I2Cx_ReadData24+0x3e>
 8005a1e:	f7ff ff60 	bl	80058e2 <Error>
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2000009c 	.word	0x2000009c

08005a30 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	460a      	mov	r2, r1
 8005a3a:	71fb      	strb	r3, [r7, #7]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8005a40:	79ba      	ldrb	r2, [r7, #6]
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	4619      	mov	r1, r3
 8005a46:	20ec      	movs	r0, #236	; 0xec
 8005a48:	f7ff ff56 	bl	80058f8 <I2Cx_WriteData>
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	4619      	mov	r1, r3
 8005a62:	20ec      	movs	r0, #236	; 0xec
 8005a64:	f7ff ff6e 	bl	8005944 <I2Cx_ReadData>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	73fb      	strb	r3, [r7, #15]
  return res;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	6039      	str	r1, [r7, #0]
 8005a80:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	4619      	mov	r1, r3
 8005a88:	20ec      	movs	r0, #236	; 0xec
 8005a8a:	f7ff ff85 	bl	8005998 <I2Cx_ReadData16>
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	6039      	str	r1, [r7, #0]
 8005aa0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	20ec      	movs	r0, #236	; 0xec
 8005aaa:	f7ff ff75 	bl	8005998 <I2Cx_ReadData16>
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	6039      	str	r1, [r7, #0]
 8005ac0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	20ec      	movs	r0, #236	; 0xec
 8005aca:	f7ff ff8b 	bl	80059e4 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	601a      	str	r2, [r3, #0]
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8005b02:	20f3      	movs	r0, #243	; 0xf3
 8005b04:	f7ff ffa6 	bl	8005a54 <BME280_ReadReg>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f003 0309 	and.w	r3, r3, #9
 8005b0e:	71fb      	strb	r3, [r7, #7]
  return res;
 8005b10:	79fb      	ldrb	r3, [r7, #7]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8005b1c:	b598      	push	{r3, r4, r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8005b20:	49ba      	ldr	r1, [pc, #744]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005b22:	2088      	movs	r0, #136	; 0x88
 8005b24:	f7ff ffa7 	bl	8005a76 <BME280_ReadReg_U16>
  sprintf(str1, "DIG_T1: %u\r\n", CalibData.dig_T1);
 8005b28:	4bb8      	ldr	r3, [pc, #736]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	49b8      	ldr	r1, [pc, #736]	; (8005e10 <BME280_ReadCoefficients+0x2f4>)
 8005b30:	48b8      	ldr	r0, [pc, #736]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005b32:	f000 fbff 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005b36:	48b7      	ldr	r0, [pc, #732]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005b38:	f7fa fb4a 	bl	80001d0 <strlen>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b44:	49b3      	ldr	r1, [pc, #716]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005b46:	48b4      	ldr	r0, [pc, #720]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005b48:	f7ff fac4 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8005b4c:	49b3      	ldr	r1, [pc, #716]	; (8005e1c <BME280_ReadCoefficients+0x300>)
 8005b4e:	208a      	movs	r0, #138	; 0x8a
 8005b50:	f7ff ffa1 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_T2: %d\r\n", CalibData.dig_T2);
 8005b54:	4bad      	ldr	r3, [pc, #692]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005b56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	49b0      	ldr	r1, [pc, #704]	; (8005e20 <BME280_ReadCoefficients+0x304>)
 8005b5e:	48ad      	ldr	r0, [pc, #692]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005b60:	f000 fbe8 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005b64:	48ab      	ldr	r0, [pc, #684]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005b66:	f7fa fb33 	bl	80001d0 <strlen>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b72:	49a8      	ldr	r1, [pc, #672]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005b74:	48a8      	ldr	r0, [pc, #672]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005b76:	f7ff faad 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8005b7a:	49aa      	ldr	r1, [pc, #680]	; (8005e24 <BME280_ReadCoefficients+0x308>)
 8005b7c:	208c      	movs	r0, #140	; 0x8c
 8005b7e:	f7ff ff8a 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_T3: %d\r\n", CalibData.dig_T3);
 8005b82:	4ba2      	ldr	r3, [pc, #648]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005b84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	49a7      	ldr	r1, [pc, #668]	; (8005e28 <BME280_ReadCoefficients+0x30c>)
 8005b8c:	48a1      	ldr	r0, [pc, #644]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005b8e:	f000 fbd1 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005b92:	48a0      	ldr	r0, [pc, #640]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005b94:	f7fa fb1c 	bl	80001d0 <strlen>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba0:	499c      	ldr	r1, [pc, #624]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005ba2:	489d      	ldr	r0, [pc, #628]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005ba4:	f7ff fa96 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8005ba8:	49a0      	ldr	r1, [pc, #640]	; (8005e2c <BME280_ReadCoefficients+0x310>)
 8005baa:	208e      	movs	r0, #142	; 0x8e
 8005bac:	f7ff ff63 	bl	8005a76 <BME280_ReadReg_U16>
  sprintf(str1, "DIG_P1: %u\r\n", CalibData.dig_P1);
 8005bb0:	4b96      	ldr	r3, [pc, #600]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005bb2:	88db      	ldrh	r3, [r3, #6]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	499e      	ldr	r1, [pc, #632]	; (8005e30 <BME280_ReadCoefficients+0x314>)
 8005bb8:	4896      	ldr	r0, [pc, #600]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005bba:	f000 fbbb 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005bbe:	4895      	ldr	r0, [pc, #596]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005bc0:	f7fa fb06 	bl	80001d0 <strlen>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bcc:	4991      	ldr	r1, [pc, #580]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005bce:	4892      	ldr	r0, [pc, #584]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005bd0:	f7ff fa80 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8005bd4:	4997      	ldr	r1, [pc, #604]	; (8005e34 <BME280_ReadCoefficients+0x318>)
 8005bd6:	2090      	movs	r0, #144	; 0x90
 8005bd8:	f7ff ff5d 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P2: %d\r\n", CalibData.dig_P2);
 8005bdc:	4b8b      	ldr	r3, [pc, #556]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005bde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005be2:	461a      	mov	r2, r3
 8005be4:	4994      	ldr	r1, [pc, #592]	; (8005e38 <BME280_ReadCoefficients+0x31c>)
 8005be6:	488b      	ldr	r0, [pc, #556]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005be8:	f000 fba4 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005bec:	4889      	ldr	r0, [pc, #548]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005bee:	f7fa faef 	bl	80001d0 <strlen>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bfa:	4986      	ldr	r1, [pc, #536]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005bfc:	4886      	ldr	r0, [pc, #536]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005bfe:	f7ff fa69 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8005c02:	498e      	ldr	r1, [pc, #568]	; (8005e3c <BME280_ReadCoefficients+0x320>)
 8005c04:	2092      	movs	r0, #146	; 0x92
 8005c06:	f7ff ff46 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P3: %d\r\n", CalibData.dig_P3);
 8005c0a:	4b80      	ldr	r3, [pc, #512]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005c0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005c10:	461a      	mov	r2, r3
 8005c12:	498b      	ldr	r1, [pc, #556]	; (8005e40 <BME280_ReadCoefficients+0x324>)
 8005c14:	487f      	ldr	r0, [pc, #508]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c16:	f000 fb8d 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005c1a:	487e      	ldr	r0, [pc, #504]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c1c:	f7fa fad8 	bl	80001d0 <strlen>
 8005c20:	4603      	mov	r3, r0
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c28:	497a      	ldr	r1, [pc, #488]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c2a:	487b      	ldr	r0, [pc, #492]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005c2c:	f7ff fa52 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8005c30:	4984      	ldr	r1, [pc, #528]	; (8005e44 <BME280_ReadCoefficients+0x328>)
 8005c32:	2094      	movs	r0, #148	; 0x94
 8005c34:	f7ff ff2f 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P4: %d\r\n", CalibData.dig_P4);
 8005c38:	4b74      	ldr	r3, [pc, #464]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005c3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4981      	ldr	r1, [pc, #516]	; (8005e48 <BME280_ReadCoefficients+0x32c>)
 8005c42:	4874      	ldr	r0, [pc, #464]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c44:	f000 fb76 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005c48:	4872      	ldr	r0, [pc, #456]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c4a:	f7fa fac1 	bl	80001d0 <strlen>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c56:	496f      	ldr	r1, [pc, #444]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c58:	486f      	ldr	r0, [pc, #444]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005c5a:	f7ff fa3b 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8005c5e:	497b      	ldr	r1, [pc, #492]	; (8005e4c <BME280_ReadCoefficients+0x330>)
 8005c60:	2096      	movs	r0, #150	; 0x96
 8005c62:	f7ff ff18 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P5: %d\r\n", CalibData.dig_P5);
 8005c66:	4b69      	ldr	r3, [pc, #420]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005c68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4978      	ldr	r1, [pc, #480]	; (8005e50 <BME280_ReadCoefficients+0x334>)
 8005c70:	4868      	ldr	r0, [pc, #416]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c72:	f000 fb5f 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005c76:	4867      	ldr	r0, [pc, #412]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c78:	f7fa faaa 	bl	80001d0 <strlen>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c84:	4963      	ldr	r1, [pc, #396]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005c86:	4864      	ldr	r0, [pc, #400]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005c88:	f7ff fa24 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8005c8c:	4971      	ldr	r1, [pc, #452]	; (8005e54 <BME280_ReadCoefficients+0x338>)
 8005c8e:	2098      	movs	r0, #152	; 0x98
 8005c90:	f7ff ff01 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P6: %d\r\n", CalibData.dig_P6);
 8005c94:	4b5d      	ldr	r3, [pc, #372]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005c96:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	496e      	ldr	r1, [pc, #440]	; (8005e58 <BME280_ReadCoefficients+0x33c>)
 8005c9e:	485d      	ldr	r0, [pc, #372]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005ca0:	f000 fb48 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005ca4:	485b      	ldr	r0, [pc, #364]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005ca6:	f7fa fa93 	bl	80001d0 <strlen>
 8005caa:	4603      	mov	r3, r0
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb2:	4958      	ldr	r1, [pc, #352]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005cb4:	4858      	ldr	r0, [pc, #352]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005cb6:	f7ff fa0d 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8005cba:	4968      	ldr	r1, [pc, #416]	; (8005e5c <BME280_ReadCoefficients+0x340>)
 8005cbc:	209a      	movs	r0, #154	; 0x9a
 8005cbe:	f7ff feea 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P7: %d\r\n", CalibData.dig_P7);
 8005cc2:	4b52      	ldr	r3, [pc, #328]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005cc4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4965      	ldr	r1, [pc, #404]	; (8005e60 <BME280_ReadCoefficients+0x344>)
 8005ccc:	4851      	ldr	r0, [pc, #324]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005cce:	f000 fb31 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005cd2:	4850      	ldr	r0, [pc, #320]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005cd4:	f7fa fa7c 	bl	80001d0 <strlen>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce0:	494c      	ldr	r1, [pc, #304]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005ce2:	484d      	ldr	r0, [pc, #308]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005ce4:	f7ff f9f6 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8005ce8:	495e      	ldr	r1, [pc, #376]	; (8005e64 <BME280_ReadCoefficients+0x348>)
 8005cea:	209c      	movs	r0, #156	; 0x9c
 8005cec:	f7ff fed3 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P8: %d\r\n", CalibData.dig_P8);
 8005cf0:	4b46      	ldr	r3, [pc, #280]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005cf2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	495b      	ldr	r1, [pc, #364]	; (8005e68 <BME280_ReadCoefficients+0x34c>)
 8005cfa:	4846      	ldr	r0, [pc, #280]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005cfc:	f000 fb1a 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005d00:	4844      	ldr	r0, [pc, #272]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d02:	f7fa fa65 	bl	80001d0 <strlen>
 8005d06:	4603      	mov	r3, r0
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d0e:	4941      	ldr	r1, [pc, #260]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d10:	4841      	ldr	r0, [pc, #260]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005d12:	f7ff f9df 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8005d16:	4955      	ldr	r1, [pc, #340]	; (8005e6c <BME280_ReadCoefficients+0x350>)
 8005d18:	209e      	movs	r0, #158	; 0x9e
 8005d1a:	f7ff febc 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P9: %d\r\n", CalibData.dig_P9);
 8005d1e:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005d20:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005d24:	461a      	mov	r2, r3
 8005d26:	4952      	ldr	r1, [pc, #328]	; (8005e70 <BME280_ReadCoefficients+0x354>)
 8005d28:	483a      	ldr	r0, [pc, #232]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d2a:	f000 fb03 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005d2e:	4839      	ldr	r0, [pc, #228]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d30:	f7fa fa4e 	bl	80001d0 <strlen>
 8005d34:	4603      	mov	r3, r0
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d3c:	4935      	ldr	r1, [pc, #212]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d3e:	4836      	ldr	r0, [pc, #216]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005d40:	f7ff f9c8 	bl	80050d4 <HAL_UART_Transmit>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8005d44:	20a1      	movs	r0, #161	; 0xa1
 8005d46:	f7ff fe85 	bl	8005a54 <BME280_ReadReg>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b2f      	ldr	r3, [pc, #188]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005d50:	761a      	strb	r2, [r3, #24]
  sprintf(str1, "DIG_H1: %d\r\n", CalibData.dig_H1);
 8005d52:	4b2e      	ldr	r3, [pc, #184]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005d54:	7e1b      	ldrb	r3, [r3, #24]
 8005d56:	461a      	mov	r2, r3
 8005d58:	4946      	ldr	r1, [pc, #280]	; (8005e74 <BME280_ReadCoefficients+0x358>)
 8005d5a:	482e      	ldr	r0, [pc, #184]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d5c:	f000 faea 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005d60:	482c      	ldr	r0, [pc, #176]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d62:	f7fa fa35 	bl	80001d0 <strlen>
 8005d66:	4603      	mov	r3, r0
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d6e:	4929      	ldr	r1, [pc, #164]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d70:	4829      	ldr	r0, [pc, #164]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005d72:	f7ff f9af 	bl	80050d4 <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8005d76:	4940      	ldr	r1, [pc, #256]	; (8005e78 <BME280_ReadCoefficients+0x35c>)
 8005d78:	20e1      	movs	r0, #225	; 0xe1
 8005d7a:	f7ff fe8c 	bl	8005a96 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_H2: %d\r\n", CalibData.dig_H2);
 8005d7e:	4b23      	ldr	r3, [pc, #140]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005d80:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8005d84:	461a      	mov	r2, r3
 8005d86:	493d      	ldr	r1, [pc, #244]	; (8005e7c <BME280_ReadCoefficients+0x360>)
 8005d88:	4822      	ldr	r0, [pc, #136]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d8a:	f000 fad3 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005d8e:	4821      	ldr	r0, [pc, #132]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d90:	f7fa fa1e 	bl	80001d0 <strlen>
 8005d94:	4603      	mov	r3, r0
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d9c:	491d      	ldr	r1, [pc, #116]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005d9e:	481e      	ldr	r0, [pc, #120]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005da0:	f7ff f998 	bl	80050d4 <HAL_UART_Transmit>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8005da4:	20e3      	movs	r0, #227	; 0xe3
 8005da6:	f7ff fe55 	bl	8005a54 <BME280_ReadReg>
 8005daa:	4603      	mov	r3, r0
 8005dac:	461a      	mov	r2, r3
 8005dae:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005db0:	771a      	strb	r2, [r3, #28]
  sprintf(str1, "DIG_H3: %d\r\n", CalibData.dig_H3);
 8005db2:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005db4:	7f1b      	ldrb	r3, [r3, #28]
 8005db6:	461a      	mov	r2, r3
 8005db8:	4931      	ldr	r1, [pc, #196]	; (8005e80 <BME280_ReadCoefficients+0x364>)
 8005dba:	4816      	ldr	r0, [pc, #88]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005dbc:	f000 faba 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005dc0:	4814      	ldr	r0, [pc, #80]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005dc2:	f7fa fa05 	bl	80001d0 <strlen>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dce:	4911      	ldr	r1, [pc, #68]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005dd0:	4811      	ldr	r0, [pc, #68]	; (8005e18 <BME280_ReadCoefficients+0x2fc>)
 8005dd2:	f7ff f97f 	bl	80050d4 <HAL_UART_Transmit>
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8005dd6:	20e4      	movs	r0, #228	; 0xe4
 8005dd8:	f7ff fe3c 	bl	8005a54 <BME280_ReadReg>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	b21c      	sxth	r4, r3
 8005de2:	20e5      	movs	r0, #229	; 0xe5
 8005de4:	f7ff fe36 	bl	8005a54 <BME280_ReadReg>
 8005de8:	4603      	mov	r3, r0
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	4323      	orrs	r3, r4
 8005df4:	b21a      	sxth	r2, r3
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005df8:	83da      	strh	r2, [r3, #30]
  sprintf(str1, "DIG_H4: %d\r\n", CalibData.dig_H4);
 8005dfa:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <BME280_ReadCoefficients+0x2f0>)
 8005dfc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005e00:	461a      	mov	r2, r3
 8005e02:	4920      	ldr	r1, [pc, #128]	; (8005e84 <BME280_ReadCoefficients+0x368>)
 8005e04:	4803      	ldr	r0, [pc, #12]	; (8005e14 <BME280_ReadCoefficients+0x2f8>)
 8005e06:	f000 fa95 	bl	8006334 <siprintf>
 8005e0a:	e03d      	b.n	8005e88 <BME280_ReadCoefficients+0x36c>
 8005e0c:	20000668 	.word	0x20000668
 8005e10:	08006c80 	.word	0x08006c80
 8005e14:	200004cc 	.word	0x200004cc
 8005e18:	200005e0 	.word	0x200005e0
 8005e1c:	2000066a 	.word	0x2000066a
 8005e20:	08006c90 	.word	0x08006c90
 8005e24:	2000066c 	.word	0x2000066c
 8005e28:	08006ca0 	.word	0x08006ca0
 8005e2c:	2000066e 	.word	0x2000066e
 8005e30:	08006cb0 	.word	0x08006cb0
 8005e34:	20000670 	.word	0x20000670
 8005e38:	08006cc0 	.word	0x08006cc0
 8005e3c:	20000672 	.word	0x20000672
 8005e40:	08006cd0 	.word	0x08006cd0
 8005e44:	20000674 	.word	0x20000674
 8005e48:	08006ce0 	.word	0x08006ce0
 8005e4c:	20000676 	.word	0x20000676
 8005e50:	08006cf0 	.word	0x08006cf0
 8005e54:	20000678 	.word	0x20000678
 8005e58:	08006d00 	.word	0x08006d00
 8005e5c:	2000067a 	.word	0x2000067a
 8005e60:	08006d10 	.word	0x08006d10
 8005e64:	2000067c 	.word	0x2000067c
 8005e68:	08006d20 	.word	0x08006d20
 8005e6c:	2000067e 	.word	0x2000067e
 8005e70:	08006d30 	.word	0x08006d30
 8005e74:	08006d40 	.word	0x08006d40
 8005e78:	20000682 	.word	0x20000682
 8005e7c:	08006d50 	.word	0x08006d50
 8005e80:	08006d60 	.word	0x08006d60
 8005e84:	08006d70 	.word	0x08006d70
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005e88:	4825      	ldr	r0, [pc, #148]	; (8005f20 <BME280_ReadCoefficients+0x404>)
 8005e8a:	f7fa f9a1 	bl	80001d0 <strlen>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e96:	4922      	ldr	r1, [pc, #136]	; (8005f20 <BME280_ReadCoefficients+0x404>)
 8005e98:	4822      	ldr	r0, [pc, #136]	; (8005f24 <BME280_ReadCoefficients+0x408>)
 8005e9a:	f7ff f91b 	bl	80050d4 <HAL_UART_Transmit>
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8005e9e:	20e6      	movs	r0, #230	; 0xe6
 8005ea0:	f7ff fdd8 	bl	8005a54 <BME280_ReadReg>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	b21c      	sxth	r4, r3
 8005eaa:	20e5      	movs	r0, #229	; 0xe5
 8005eac:	f7ff fdd2 	bl	8005a54 <BME280_ReadReg>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	b21b      	sxth	r3, r3
 8005eb8:	4323      	orrs	r3, r4
 8005eba:	b21a      	sxth	r2, r3
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <BME280_ReadCoefficients+0x40c>)
 8005ebe:	841a      	strh	r2, [r3, #32]
  sprintf(str1, "DIG_H5: %d\r\n", CalibData.dig_H5);
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <BME280_ReadCoefficients+0x40c>)
 8005ec2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4918      	ldr	r1, [pc, #96]	; (8005f2c <BME280_ReadCoefficients+0x410>)
 8005eca:	4815      	ldr	r0, [pc, #84]	; (8005f20 <BME280_ReadCoefficients+0x404>)
 8005ecc:	f000 fa32 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005ed0:	4813      	ldr	r0, [pc, #76]	; (8005f20 <BME280_ReadCoefficients+0x404>)
 8005ed2:	f7fa f97d 	bl	80001d0 <strlen>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ede:	4910      	ldr	r1, [pc, #64]	; (8005f20 <BME280_ReadCoefficients+0x404>)
 8005ee0:	4810      	ldr	r0, [pc, #64]	; (8005f24 <BME280_ReadCoefficients+0x408>)
 8005ee2:	f7ff f8f7 	bl	80050d4 <HAL_UART_Transmit>
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8005ee6:	20e7      	movs	r0, #231	; 0xe7
 8005ee8:	f7ff fdb4 	bl	8005a54 <BME280_ReadReg>
 8005eec:	4603      	mov	r3, r0
 8005eee:	b25a      	sxtb	r2, r3
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <BME280_ReadCoefficients+0x40c>)
 8005ef2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  sprintf(str1, "DIG_H6: %d\r\n", CalibData.dig_H3);
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <BME280_ReadCoefficients+0x40c>)
 8005ef8:	7f1b      	ldrb	r3, [r3, #28]
 8005efa:	461a      	mov	r2, r3
 8005efc:	490c      	ldr	r1, [pc, #48]	; (8005f30 <BME280_ReadCoefficients+0x414>)
 8005efe:	4808      	ldr	r0, [pc, #32]	; (8005f20 <BME280_ReadCoefficients+0x404>)
 8005f00:	f000 fa18 	bl	8006334 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8005f04:	4806      	ldr	r0, [pc, #24]	; (8005f20 <BME280_ReadCoefficients+0x404>)
 8005f06:	f7fa f963 	bl	80001d0 <strlen>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f12:	4903      	ldr	r1, [pc, #12]	; (8005f20 <BME280_ReadCoefficients+0x404>)
 8005f14:	4803      	ldr	r0, [pc, #12]	; (8005f24 <BME280_ReadCoefficients+0x408>)
 8005f16:	f7ff f8dd 	bl	80050d4 <HAL_UART_Transmit>
}
 8005f1a:	bf00      	nop
 8005f1c:	bd98      	pop	{r3, r4, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	200004cc 	.word	0x200004cc
 8005f24:	200005e0 	.word	0x200005e0
 8005f28:	20000668 	.word	0x20000668
 8005f2c:	08006d80 	.word	0x08006d80
 8005f30:	08006d90 	.word	0x08006d90

08005f34 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8005f3e:	20f5      	movs	r0, #245	; 0xf5
 8005f40:	f7ff fd88 	bl	8005a54 <BME280_ReadReg>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8005f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f50:	f023 031f 	bic.w	r3, r3, #31
 8005f54:	b25a      	sxtb	r2, r3
 8005f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b25b      	sxtb	r3, r3
 8005f5e:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	4619      	mov	r1, r3
 8005f64:	20f5      	movs	r0, #245	; 0xf5
 8005f66:	f7ff fd63 	bl	8005a30 <BME280_WriteReg>
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	4603      	mov	r3, r0
 8005f7a:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8005f7c:	20f5      	movs	r0, #245	; 0xf5
 8005f7e:	f7ff fd69 	bl	8005a54 <BME280_ReadReg>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f023 031c 	bic.w	r3, r3, #28
 8005f88:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 8005f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8e:	f003 031c 	and.w	r3, r3, #28
 8005f92:	b25a      	sxtb	r2, r3
 8005f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	20f5      	movs	r0, #245	; 0xf5
 8005fa4:	f7ff fd44 	bl	8005a30 <BME280_WriteReg>
}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8005fba:	20f4      	movs	r0, #244	; 0xf4
 8005fbc:	f7ff fd4a 	bl	8005a54 <BME280_ReadReg>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f003 031f 	and.w	r3, r3, #31
 8005fc6:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 8005fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fcc:	f023 031f 	bic.w	r3, r3, #31
 8005fd0:	b25a      	sxtb	r2, r3
 8005fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b25b      	sxtb	r3, r3
 8005fda:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	20f4      	movs	r0, #244	; 0xf4
 8005fe2:	f7ff fd25 	bl	8005a30 <BME280_WriteReg>
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8005ff8:	20f4      	movs	r0, #244	; 0xf4
 8005ffa:	f7ff fd2b 	bl	8005a54 <BME280_ReadReg>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f023 031c 	bic.w	r3, r3, #28
 8006004:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 8006006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600a:	f003 031c 	and.w	r3, r3, #28
 800600e:	b25a      	sxtb	r2, r3
 8006010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006014:	4313      	orrs	r3, r2
 8006016:	b25b      	sxtb	r3, r3
 8006018:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	4619      	mov	r1, r3
 800601e:	20f4      	movs	r0, #244	; 0xf4
 8006020:	f7ff fd06 	bl	8005a30 <BME280_WriteReg>
}
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8006036:	20f2      	movs	r0, #242	; 0xf2
 8006038:	f7ff fd0c 	bl	8005a54 <BME280_ReadReg>
 800603c:	4603      	mov	r3, r0
 800603e:	f023 0307 	bic.w	r3, r3, #7
 8006042:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8006044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	b25a      	sxtb	r2, r3
 800604e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006052:	4313      	orrs	r3, r2
 8006054:	b25b      	sxtb	r3, r3
 8006056:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	4619      	mov	r1, r3
 800605c:	20f2      	movs	r0, #242	; 0xf2
 800605e:	f7ff fce7 	bl	8005a30 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8006062:	20f4      	movs	r0, #244	; 0xf4
 8006064:	f7ff fcf6 	bl	8005a54 <BME280_ReadReg>
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	4619      	mov	r1, r3
 8006070:	20f4      	movs	r0, #244	; 0xf4
 8006072:	f7ff fcdd 	bl	8005a30 <BME280_WriteReg>
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	4603      	mov	r3, r0
 8006086:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8006088:	20f4      	movs	r0, #244	; 0xf4
 800608a:	f7ff fce3 	bl	8005a54 <BME280_ReadReg>
 800608e:	4603      	mov	r3, r0
 8006090:	f023 0303 	bic.w	r3, r3, #3
 8006094:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 8006096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	b25a      	sxtb	r2, r3
 80060a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b25b      	sxtb	r3, r3
 80060a8:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	4619      	mov	r1, r3
 80060ae:	20f4      	movs	r0, #244	; 0xf4
 80060b0:	f7ff fcbe 	bl	8005a30 <BME280_WriteReg>
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  float temper_float = 0.0f;
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 80060ca:	f107 0308 	add.w	r3, r7, #8
 80060ce:	4619      	mov	r1, r3
 80060d0:	20fa      	movs	r0, #250	; 0xfa
 80060d2:	f7ff fcf0 	bl	8005ab6 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	60bb      	str	r3, [r7, #8]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	08db      	lsrs	r3, r3, #3
 80060e0:	4a20      	ldr	r2, [pc, #128]	; (8006164 <BME280_ReadTemperature+0xa8>)
 80060e2:	8812      	ldrh	r2, [r2, #0]
 80060e4:	0052      	lsls	r2, r2, #1
 80060e6:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.dig_T2)) >> 11;
 80060e8:	4a1e      	ldr	r2, [pc, #120]	; (8006164 <BME280_ReadTemperature+0xa8>)
 80060ea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 80060f2:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80060f4:	613b      	str	r3, [r7, #16]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <BME280_ReadTemperature+0xa8>)
 80060fc:	8812      	ldrh	r2, [r2, #0]
 80060fe:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	0912      	lsrs	r2, r2, #4
 8006104:	4917      	ldr	r1, [pc, #92]	; (8006164 <BME280_ReadTemperature+0xa8>)
 8006106:	8809      	ldrh	r1, [r1, #0]
 8006108:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800610a:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800610e:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8006110:	4a14      	ldr	r2, [pc, #80]	; (8006164 <BME280_ReadTemperature+0xa8>)
 8006112:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8006116:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 800611a:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800611c:	60fb      	str	r3, [r7, #12]
	temper_int = val1 + val2;
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	4a10      	ldr	r2, [pc, #64]	; (8006168 <BME280_ReadTemperature+0xac>)
 8006126:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <BME280_ReadTemperature+0xac>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	3380      	adds	r3, #128	; 0x80
 8006134:	121b      	asrs	r3, r3, #8
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800613e:	edc7 7a05 	vstr	s15, [r7, #20]
	temper_float /= 100.0f;
 8006142:	ed97 7a05 	vldr	s14, [r7, #20]
 8006146:	eddf 6a09 	vldr	s13, [pc, #36]	; 800616c <BME280_ReadTemperature+0xb0>
 800614a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800614e:	edc7 7a05 	vstr	s15, [r7, #20]
  return temper_float;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	ee07 3a90 	vmov	s15, r3
}
 8006158:	eeb0 0a67 	vmov.f32	s0, s15
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000668 	.word	0x20000668
 8006168:	2000068c 	.word	0x2000068c
 800616c:	42c80000 	.word	0x42c80000

08006170 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	607b      	str	r3, [r7, #4]
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
	press_float = pres_int / 100.0f;
	*/
  return press_float;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	ee07 3a90 	vmov	s15, r3
}
 8006182:	eeb0 0a67 	vmov.f32	s0, s15
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	607b      	str	r3, [r7, #4]
		((int32_t)CalibData.dig_H1)) >> 4));
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
	hum_float = (v_x1_u32r>>12);
	hum_float /= 1024.0f;*/
  return hum_float;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	ee07 3a90 	vmov	s15, r3
}
 80061a2:	eeb0 0a67 	vmov.f32	s0, s15
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af02      	add	r7, sp, #8
  uint8_t value=0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	603b      	str	r3, [r7, #0]
  LED_ON;
 80061be:	2201      	movs	r2, #1
 80061c0:	2120      	movs	r1, #32
 80061c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061c6:	f7fc f9cb 	bl	8002560 <HAL_GPIO_WritePin>
	value = BME280_ReadReg(0xEC);
 80061ca:	20ec      	movs	r0, #236	; 0xec
 80061cc:	f7ff fc42 	bl	8005a54 <BME280_ReadReg>
 80061d0:	4603      	mov	r3, r0
 80061d2:	71fb      	strb	r3, [r7, #7]
	//sprintf(str1, "\r\n\r\nID: 0x%02X\r\n", value);
	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);

	if(value != BME280_ID)
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	2b60      	cmp	r3, #96	; 0x60
 80061d8:	d002      	beq.n	80061e0 <BME280_Init+0x30>
	{
		Error();
 80061da:	f7ff fb82 	bl	80058e2 <Error>
		return;
 80061de:	e067      	b.n	80062b0 <BME280_Init+0x100>
	}

	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80061e0:	21b6      	movs	r1, #182	; 0xb6
 80061e2:	20e0      	movs	r0, #224	; 0xe0
 80061e4:	f7ff fc24 	bl	8005a30 <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80061e8:	bf00      	nop
 80061ea:	f7ff fc87 	bl	8005afc <BME280_ReadStatus>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f8      	bne.n	80061ea <BME280_Init+0x3a>
	BME280_ReadCoefficients();
 80061f8:	f7ff fc90 	bl	8005b1c <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 80061fc:	20a0      	movs	r0, #160	; 0xa0
 80061fe:	f7ff fe99 	bl	8005f34 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8006202:	2008      	movs	r0, #8
 8006204:	f7ff feb5 	bl	8005f72 <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8006208:	2060      	movs	r0, #96	; 0x60
 800620a:	f7ff fed1 	bl	8005fb0 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 800620e:	2008      	movs	r0, #8
 8006210:	f7ff feed 	bl	8005fee <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8006214:	2001      	movs	r0, #1
 8006216:	f7ff ff09 	bl	800602c <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 800621a:	20f4      	movs	r0, #244	; 0xf4
 800621c:	f7ff fc1a 	bl	8005a54 <BME280_ReadReg>
 8006220:	4603      	mov	r3, r0
 8006222:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8006224:	20f2      	movs	r0, #242	; 0xf2
 8006226:	f7ff fc15 	bl	8005a54 <BME280_ReadReg>
 800622a:	4603      	mov	r3, r0
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	461a      	mov	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	4313      	orrs	r3, r2
 8006234:	603b      	str	r3, [r7, #0]
	sprintf(str1, "Measurements status: %04X\r\n", value32);
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	491f      	ldr	r1, [pc, #124]	; (80062b8 <BME280_Init+0x108>)
 800623a:	4820      	ldr	r0, [pc, #128]	; (80062bc <BME280_Init+0x10c>)
 800623c:	f000 f87a 	bl	8006334 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8006240:	481e      	ldr	r0, [pc, #120]	; (80062bc <BME280_Init+0x10c>)
 8006242:	f7f9 ffc5 	bl	80001d0 <strlen>
 8006246:	4603      	mov	r3, r0
 8006248:	b29a      	uxth	r2, r3
 800624a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800624e:	491b      	ldr	r1, [pc, #108]	; (80062bc <BME280_Init+0x10c>)
 8006250:	481b      	ldr	r0, [pc, #108]	; (80062c0 <BME280_Init+0x110>)
 8006252:	f7fe ff3f 	bl	80050d4 <HAL_UART_Transmit>
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
		(value32 & BME280_OSRS_T_MSK) ? "ON" : "OFF",
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <BME280_Init+0xb4>
 8006260:	4a18      	ldr	r2, [pc, #96]	; (80062c4 <BME280_Init+0x114>)
 8006262:	e000      	b.n	8006266 <BME280_Init+0xb6>
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <BME280_Init+0x118>)
		(value32 & BME280_OSRS_P_MSK) ? "ON" : "OFF",
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	f003 031c 	and.w	r3, r3, #28
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <BME280_Init+0xc4>
 8006270:	4914      	ldr	r1, [pc, #80]	; (80062c4 <BME280_Init+0x114>)
 8006272:	e000      	b.n	8006276 <BME280_Init+0xc6>
 8006274:	4914      	ldr	r1, [pc, #80]	; (80062c8 <BME280_Init+0x118>)
		((value32 >> 8) & BME280_OSRS_H_MSK) ? "ON" : "OFF");
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	f003 0307 	and.w	r3, r3, #7
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <BME280_Init+0xd6>
 8006282:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <BME280_Init+0x114>)
 8006284:	e000      	b.n	8006288 <BME280_Init+0xd8>
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <BME280_Init+0x118>)
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	460b      	mov	r3, r1
 800628c:	490f      	ldr	r1, [pc, #60]	; (80062cc <BME280_Init+0x11c>)
 800628e:	480b      	ldr	r0, [pc, #44]	; (80062bc <BME280_Init+0x10c>)
 8006290:	f000 f850 	bl	8006334 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8006294:	4809      	ldr	r0, [pc, #36]	; (80062bc <BME280_Init+0x10c>)
 8006296:	f7f9 ff9b 	bl	80001d0 <strlen>
 800629a:	4603      	mov	r3, r0
 800629c:	b29a      	uxth	r2, r3
 800629e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062a2:	4906      	ldr	r1, [pc, #24]	; (80062bc <BME280_Init+0x10c>)
 80062a4:	4806      	ldr	r0, [pc, #24]	; (80062c0 <BME280_Init+0x110>)
 80062a6:	f7fe ff15 	bl	80050d4 <HAL_UART_Transmit>
	BME280_SetMode(BME280_MODE_NORMAL);
 80062aa:	2003      	movs	r0, #3
 80062ac:	f7ff fee7 	bl	800607e <BME280_SetMode>
}
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	08006da0 	.word	0x08006da0
 80062bc:	200004cc 	.word	0x200004cc
 80062c0:	200005e0 	.word	0x200005e0
 80062c4:	08006dbc 	.word	0x08006dbc
 80062c8:	08006dc0 	.word	0x08006dc0
 80062cc:	08006dc4 	.word	0x08006dc4

080062d0 <__errno>:
 80062d0:	4b01      	ldr	r3, [pc, #4]	; (80062d8 <__errno+0x8>)
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000010 	.word	0x20000010

080062dc <__libc_init_array>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4d0d      	ldr	r5, [pc, #52]	; (8006314 <__libc_init_array+0x38>)
 80062e0:	4c0d      	ldr	r4, [pc, #52]	; (8006318 <__libc_init_array+0x3c>)
 80062e2:	1b64      	subs	r4, r4, r5
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	2600      	movs	r6, #0
 80062e8:	42a6      	cmp	r6, r4
 80062ea:	d109      	bne.n	8006300 <__libc_init_array+0x24>
 80062ec:	4d0b      	ldr	r5, [pc, #44]	; (800631c <__libc_init_array+0x40>)
 80062ee:	4c0c      	ldr	r4, [pc, #48]	; (8006320 <__libc_init_array+0x44>)
 80062f0:	f000 fc4e 	bl	8006b90 <_init>
 80062f4:	1b64      	subs	r4, r4, r5
 80062f6:	10a4      	asrs	r4, r4, #2
 80062f8:	2600      	movs	r6, #0
 80062fa:	42a6      	cmp	r6, r4
 80062fc:	d105      	bne.n	800630a <__libc_init_array+0x2e>
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	f855 3b04 	ldr.w	r3, [r5], #4
 8006304:	4798      	blx	r3
 8006306:	3601      	adds	r6, #1
 8006308:	e7ee      	b.n	80062e8 <__libc_init_array+0xc>
 800630a:	f855 3b04 	ldr.w	r3, [r5], #4
 800630e:	4798      	blx	r3
 8006310:	3601      	adds	r6, #1
 8006312:	e7f2      	b.n	80062fa <__libc_init_array+0x1e>
 8006314:	08007294 	.word	0x08007294
 8006318:	08007294 	.word	0x08007294
 800631c:	08007294 	.word	0x08007294
 8006320:	08007298 	.word	0x08007298

08006324 <memset>:
 8006324:	4402      	add	r2, r0
 8006326:	4603      	mov	r3, r0
 8006328:	4293      	cmp	r3, r2
 800632a:	d100      	bne.n	800632e <memset+0xa>
 800632c:	4770      	bx	lr
 800632e:	f803 1b01 	strb.w	r1, [r3], #1
 8006332:	e7f9      	b.n	8006328 <memset+0x4>

08006334 <siprintf>:
 8006334:	b40e      	push	{r1, r2, r3}
 8006336:	b500      	push	{lr}
 8006338:	b09c      	sub	sp, #112	; 0x70
 800633a:	ab1d      	add	r3, sp, #116	; 0x74
 800633c:	9002      	str	r0, [sp, #8]
 800633e:	9006      	str	r0, [sp, #24]
 8006340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006344:	4809      	ldr	r0, [pc, #36]	; (800636c <siprintf+0x38>)
 8006346:	9107      	str	r1, [sp, #28]
 8006348:	9104      	str	r1, [sp, #16]
 800634a:	4909      	ldr	r1, [pc, #36]	; (8006370 <siprintf+0x3c>)
 800634c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006350:	9105      	str	r1, [sp, #20]
 8006352:	6800      	ldr	r0, [r0, #0]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	a902      	add	r1, sp, #8
 8006358:	f000 f868 	bl	800642c <_svfiprintf_r>
 800635c:	9b02      	ldr	r3, [sp, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	b01c      	add	sp, #112	; 0x70
 8006364:	f85d eb04 	ldr.w	lr, [sp], #4
 8006368:	b003      	add	sp, #12
 800636a:	4770      	bx	lr
 800636c:	20000010 	.word	0x20000010
 8006370:	ffff0208 	.word	0xffff0208

08006374 <__ssputs_r>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	688e      	ldr	r6, [r1, #8]
 800637a:	429e      	cmp	r6, r3
 800637c:	4682      	mov	sl, r0
 800637e:	460c      	mov	r4, r1
 8006380:	4690      	mov	r8, r2
 8006382:	461f      	mov	r7, r3
 8006384:	d838      	bhi.n	80063f8 <__ssputs_r+0x84>
 8006386:	898a      	ldrh	r2, [r1, #12]
 8006388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800638c:	d032      	beq.n	80063f4 <__ssputs_r+0x80>
 800638e:	6825      	ldr	r5, [r4, #0]
 8006390:	6909      	ldr	r1, [r1, #16]
 8006392:	eba5 0901 	sub.w	r9, r5, r1
 8006396:	6965      	ldr	r5, [r4, #20]
 8006398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800639c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063a0:	3301      	adds	r3, #1
 80063a2:	444b      	add	r3, r9
 80063a4:	106d      	asrs	r5, r5, #1
 80063a6:	429d      	cmp	r5, r3
 80063a8:	bf38      	it	cc
 80063aa:	461d      	movcc	r5, r3
 80063ac:	0553      	lsls	r3, r2, #21
 80063ae:	d531      	bpl.n	8006414 <__ssputs_r+0xa0>
 80063b0:	4629      	mov	r1, r5
 80063b2:	f000 fb47 	bl	8006a44 <_malloc_r>
 80063b6:	4606      	mov	r6, r0
 80063b8:	b950      	cbnz	r0, 80063d0 <__ssputs_r+0x5c>
 80063ba:	230c      	movs	r3, #12
 80063bc:	f8ca 3000 	str.w	r3, [sl]
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d0:	6921      	ldr	r1, [r4, #16]
 80063d2:	464a      	mov	r2, r9
 80063d4:	f000 fabe 	bl	8006954 <memcpy>
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	6126      	str	r6, [r4, #16]
 80063e6:	6165      	str	r5, [r4, #20]
 80063e8:	444e      	add	r6, r9
 80063ea:	eba5 0509 	sub.w	r5, r5, r9
 80063ee:	6026      	str	r6, [r4, #0]
 80063f0:	60a5      	str	r5, [r4, #8]
 80063f2:	463e      	mov	r6, r7
 80063f4:	42be      	cmp	r6, r7
 80063f6:	d900      	bls.n	80063fa <__ssputs_r+0x86>
 80063f8:	463e      	mov	r6, r7
 80063fa:	4632      	mov	r2, r6
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	4641      	mov	r1, r8
 8006400:	f000 fab6 	bl	8006970 <memmove>
 8006404:	68a3      	ldr	r3, [r4, #8]
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	1b9b      	subs	r3, r3, r6
 800640a:	4432      	add	r2, r6
 800640c:	60a3      	str	r3, [r4, #8]
 800640e:	6022      	str	r2, [r4, #0]
 8006410:	2000      	movs	r0, #0
 8006412:	e7db      	b.n	80063cc <__ssputs_r+0x58>
 8006414:	462a      	mov	r2, r5
 8006416:	f000 fb6f 	bl	8006af8 <_realloc_r>
 800641a:	4606      	mov	r6, r0
 800641c:	2800      	cmp	r0, #0
 800641e:	d1e1      	bne.n	80063e4 <__ssputs_r+0x70>
 8006420:	6921      	ldr	r1, [r4, #16]
 8006422:	4650      	mov	r0, sl
 8006424:	f000 fabe 	bl	80069a4 <_free_r>
 8006428:	e7c7      	b.n	80063ba <__ssputs_r+0x46>
	...

0800642c <_svfiprintf_r>:
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	4698      	mov	r8, r3
 8006432:	898b      	ldrh	r3, [r1, #12]
 8006434:	061b      	lsls	r3, r3, #24
 8006436:	b09d      	sub	sp, #116	; 0x74
 8006438:	4607      	mov	r7, r0
 800643a:	460d      	mov	r5, r1
 800643c:	4614      	mov	r4, r2
 800643e:	d50e      	bpl.n	800645e <_svfiprintf_r+0x32>
 8006440:	690b      	ldr	r3, [r1, #16]
 8006442:	b963      	cbnz	r3, 800645e <_svfiprintf_r+0x32>
 8006444:	2140      	movs	r1, #64	; 0x40
 8006446:	f000 fafd 	bl	8006a44 <_malloc_r>
 800644a:	6028      	str	r0, [r5, #0]
 800644c:	6128      	str	r0, [r5, #16]
 800644e:	b920      	cbnz	r0, 800645a <_svfiprintf_r+0x2e>
 8006450:	230c      	movs	r3, #12
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	e0d1      	b.n	80065fe <_svfiprintf_r+0x1d2>
 800645a:	2340      	movs	r3, #64	; 0x40
 800645c:	616b      	str	r3, [r5, #20]
 800645e:	2300      	movs	r3, #0
 8006460:	9309      	str	r3, [sp, #36]	; 0x24
 8006462:	2320      	movs	r3, #32
 8006464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006468:	f8cd 800c 	str.w	r8, [sp, #12]
 800646c:	2330      	movs	r3, #48	; 0x30
 800646e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006618 <_svfiprintf_r+0x1ec>
 8006472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006476:	f04f 0901 	mov.w	r9, #1
 800647a:	4623      	mov	r3, r4
 800647c:	469a      	mov	sl, r3
 800647e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006482:	b10a      	cbz	r2, 8006488 <_svfiprintf_r+0x5c>
 8006484:	2a25      	cmp	r2, #37	; 0x25
 8006486:	d1f9      	bne.n	800647c <_svfiprintf_r+0x50>
 8006488:	ebba 0b04 	subs.w	fp, sl, r4
 800648c:	d00b      	beq.n	80064a6 <_svfiprintf_r+0x7a>
 800648e:	465b      	mov	r3, fp
 8006490:	4622      	mov	r2, r4
 8006492:	4629      	mov	r1, r5
 8006494:	4638      	mov	r0, r7
 8006496:	f7ff ff6d 	bl	8006374 <__ssputs_r>
 800649a:	3001      	adds	r0, #1
 800649c:	f000 80aa 	beq.w	80065f4 <_svfiprintf_r+0x1c8>
 80064a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064a2:	445a      	add	r2, fp
 80064a4:	9209      	str	r2, [sp, #36]	; 0x24
 80064a6:	f89a 3000 	ldrb.w	r3, [sl]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80a2 	beq.w	80065f4 <_svfiprintf_r+0x1c8>
 80064b0:	2300      	movs	r3, #0
 80064b2:	f04f 32ff 	mov.w	r2, #4294967295
 80064b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ba:	f10a 0a01 	add.w	sl, sl, #1
 80064be:	9304      	str	r3, [sp, #16]
 80064c0:	9307      	str	r3, [sp, #28]
 80064c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064c6:	931a      	str	r3, [sp, #104]	; 0x68
 80064c8:	4654      	mov	r4, sl
 80064ca:	2205      	movs	r2, #5
 80064cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d0:	4851      	ldr	r0, [pc, #324]	; (8006618 <_svfiprintf_r+0x1ec>)
 80064d2:	f7f9 fe85 	bl	80001e0 <memchr>
 80064d6:	9a04      	ldr	r2, [sp, #16]
 80064d8:	b9d8      	cbnz	r0, 8006512 <_svfiprintf_r+0xe6>
 80064da:	06d0      	lsls	r0, r2, #27
 80064dc:	bf44      	itt	mi
 80064de:	2320      	movmi	r3, #32
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e4:	0711      	lsls	r1, r2, #28
 80064e6:	bf44      	itt	mi
 80064e8:	232b      	movmi	r3, #43	; 0x2b
 80064ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ee:	f89a 3000 	ldrb.w	r3, [sl]
 80064f2:	2b2a      	cmp	r3, #42	; 0x2a
 80064f4:	d015      	beq.n	8006522 <_svfiprintf_r+0xf6>
 80064f6:	9a07      	ldr	r2, [sp, #28]
 80064f8:	4654      	mov	r4, sl
 80064fa:	2000      	movs	r0, #0
 80064fc:	f04f 0c0a 	mov.w	ip, #10
 8006500:	4621      	mov	r1, r4
 8006502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006506:	3b30      	subs	r3, #48	; 0x30
 8006508:	2b09      	cmp	r3, #9
 800650a:	d94e      	bls.n	80065aa <_svfiprintf_r+0x17e>
 800650c:	b1b0      	cbz	r0, 800653c <_svfiprintf_r+0x110>
 800650e:	9207      	str	r2, [sp, #28]
 8006510:	e014      	b.n	800653c <_svfiprintf_r+0x110>
 8006512:	eba0 0308 	sub.w	r3, r0, r8
 8006516:	fa09 f303 	lsl.w	r3, r9, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	46a2      	mov	sl, r4
 8006520:	e7d2      	b.n	80064c8 <_svfiprintf_r+0x9c>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	1d19      	adds	r1, r3, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	9103      	str	r1, [sp, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	bfbb      	ittet	lt
 800652e:	425b      	neglt	r3, r3
 8006530:	f042 0202 	orrlt.w	r2, r2, #2
 8006534:	9307      	strge	r3, [sp, #28]
 8006536:	9307      	strlt	r3, [sp, #28]
 8006538:	bfb8      	it	lt
 800653a:	9204      	strlt	r2, [sp, #16]
 800653c:	7823      	ldrb	r3, [r4, #0]
 800653e:	2b2e      	cmp	r3, #46	; 0x2e
 8006540:	d10c      	bne.n	800655c <_svfiprintf_r+0x130>
 8006542:	7863      	ldrb	r3, [r4, #1]
 8006544:	2b2a      	cmp	r3, #42	; 0x2a
 8006546:	d135      	bne.n	80065b4 <_svfiprintf_r+0x188>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	1d1a      	adds	r2, r3, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	9203      	str	r2, [sp, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	bfb8      	it	lt
 8006554:	f04f 33ff 	movlt.w	r3, #4294967295
 8006558:	3402      	adds	r4, #2
 800655a:	9305      	str	r3, [sp, #20]
 800655c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006628 <_svfiprintf_r+0x1fc>
 8006560:	7821      	ldrb	r1, [r4, #0]
 8006562:	2203      	movs	r2, #3
 8006564:	4650      	mov	r0, sl
 8006566:	f7f9 fe3b 	bl	80001e0 <memchr>
 800656a:	b140      	cbz	r0, 800657e <_svfiprintf_r+0x152>
 800656c:	2340      	movs	r3, #64	; 0x40
 800656e:	eba0 000a 	sub.w	r0, r0, sl
 8006572:	fa03 f000 	lsl.w	r0, r3, r0
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	4303      	orrs	r3, r0
 800657a:	3401      	adds	r4, #1
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006582:	4826      	ldr	r0, [pc, #152]	; (800661c <_svfiprintf_r+0x1f0>)
 8006584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006588:	2206      	movs	r2, #6
 800658a:	f7f9 fe29 	bl	80001e0 <memchr>
 800658e:	2800      	cmp	r0, #0
 8006590:	d038      	beq.n	8006604 <_svfiprintf_r+0x1d8>
 8006592:	4b23      	ldr	r3, [pc, #140]	; (8006620 <_svfiprintf_r+0x1f4>)
 8006594:	bb1b      	cbnz	r3, 80065de <_svfiprintf_r+0x1b2>
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	3307      	adds	r3, #7
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	3308      	adds	r3, #8
 80065a0:	9303      	str	r3, [sp, #12]
 80065a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a4:	4433      	add	r3, r6
 80065a6:	9309      	str	r3, [sp, #36]	; 0x24
 80065a8:	e767      	b.n	800647a <_svfiprintf_r+0x4e>
 80065aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80065ae:	460c      	mov	r4, r1
 80065b0:	2001      	movs	r0, #1
 80065b2:	e7a5      	b.n	8006500 <_svfiprintf_r+0xd4>
 80065b4:	2300      	movs	r3, #0
 80065b6:	3401      	adds	r4, #1
 80065b8:	9305      	str	r3, [sp, #20]
 80065ba:	4619      	mov	r1, r3
 80065bc:	f04f 0c0a 	mov.w	ip, #10
 80065c0:	4620      	mov	r0, r4
 80065c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c6:	3a30      	subs	r2, #48	; 0x30
 80065c8:	2a09      	cmp	r2, #9
 80065ca:	d903      	bls.n	80065d4 <_svfiprintf_r+0x1a8>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0c5      	beq.n	800655c <_svfiprintf_r+0x130>
 80065d0:	9105      	str	r1, [sp, #20]
 80065d2:	e7c3      	b.n	800655c <_svfiprintf_r+0x130>
 80065d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d8:	4604      	mov	r4, r0
 80065da:	2301      	movs	r3, #1
 80065dc:	e7f0      	b.n	80065c0 <_svfiprintf_r+0x194>
 80065de:	ab03      	add	r3, sp, #12
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	462a      	mov	r2, r5
 80065e4:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <_svfiprintf_r+0x1f8>)
 80065e6:	a904      	add	r1, sp, #16
 80065e8:	4638      	mov	r0, r7
 80065ea:	f3af 8000 	nop.w
 80065ee:	1c42      	adds	r2, r0, #1
 80065f0:	4606      	mov	r6, r0
 80065f2:	d1d6      	bne.n	80065a2 <_svfiprintf_r+0x176>
 80065f4:	89ab      	ldrh	r3, [r5, #12]
 80065f6:	065b      	lsls	r3, r3, #25
 80065f8:	f53f af2c 	bmi.w	8006454 <_svfiprintf_r+0x28>
 80065fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065fe:	b01d      	add	sp, #116	; 0x74
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	ab03      	add	r3, sp, #12
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	462a      	mov	r2, r5
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <_svfiprintf_r+0x1f8>)
 800660c:	a904      	add	r1, sp, #16
 800660e:	4638      	mov	r0, r7
 8006610:	f000 f87a 	bl	8006708 <_printf_i>
 8006614:	e7eb      	b.n	80065ee <_svfiprintf_r+0x1c2>
 8006616:	bf00      	nop
 8006618:	08007258 	.word	0x08007258
 800661c:	08007262 	.word	0x08007262
 8006620:	00000000 	.word	0x00000000
 8006624:	08006375 	.word	0x08006375
 8006628:	0800725e 	.word	0x0800725e

0800662c <_printf_common>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	4616      	mov	r6, r2
 8006632:	4699      	mov	r9, r3
 8006634:	688a      	ldr	r2, [r1, #8]
 8006636:	690b      	ldr	r3, [r1, #16]
 8006638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800663c:	4293      	cmp	r3, r2
 800663e:	bfb8      	it	lt
 8006640:	4613      	movlt	r3, r2
 8006642:	6033      	str	r3, [r6, #0]
 8006644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006648:	4607      	mov	r7, r0
 800664a:	460c      	mov	r4, r1
 800664c:	b10a      	cbz	r2, 8006652 <_printf_common+0x26>
 800664e:	3301      	adds	r3, #1
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	0699      	lsls	r1, r3, #26
 8006656:	bf42      	ittt	mi
 8006658:	6833      	ldrmi	r3, [r6, #0]
 800665a:	3302      	addmi	r3, #2
 800665c:	6033      	strmi	r3, [r6, #0]
 800665e:	6825      	ldr	r5, [r4, #0]
 8006660:	f015 0506 	ands.w	r5, r5, #6
 8006664:	d106      	bne.n	8006674 <_printf_common+0x48>
 8006666:	f104 0a19 	add.w	sl, r4, #25
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	6832      	ldr	r2, [r6, #0]
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	42ab      	cmp	r3, r5
 8006672:	dc26      	bgt.n	80066c2 <_printf_common+0x96>
 8006674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006678:	1e13      	subs	r3, r2, #0
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	bf18      	it	ne
 800667e:	2301      	movne	r3, #1
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d42b      	bmi.n	80066dc <_printf_common+0xb0>
 8006684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006688:	4649      	mov	r1, r9
 800668a:	4638      	mov	r0, r7
 800668c:	47c0      	blx	r8
 800668e:	3001      	adds	r0, #1
 8006690:	d01e      	beq.n	80066d0 <_printf_common+0xa4>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	68e5      	ldr	r5, [r4, #12]
 8006696:	6832      	ldr	r2, [r6, #0]
 8006698:	f003 0306 	and.w	r3, r3, #6
 800669c:	2b04      	cmp	r3, #4
 800669e:	bf08      	it	eq
 80066a0:	1aad      	subeq	r5, r5, r2
 80066a2:	68a3      	ldr	r3, [r4, #8]
 80066a4:	6922      	ldr	r2, [r4, #16]
 80066a6:	bf0c      	ite	eq
 80066a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ac:	2500      	movne	r5, #0
 80066ae:	4293      	cmp	r3, r2
 80066b0:	bfc4      	itt	gt
 80066b2:	1a9b      	subgt	r3, r3, r2
 80066b4:	18ed      	addgt	r5, r5, r3
 80066b6:	2600      	movs	r6, #0
 80066b8:	341a      	adds	r4, #26
 80066ba:	42b5      	cmp	r5, r6
 80066bc:	d11a      	bne.n	80066f4 <_printf_common+0xc8>
 80066be:	2000      	movs	r0, #0
 80066c0:	e008      	b.n	80066d4 <_printf_common+0xa8>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4652      	mov	r2, sl
 80066c6:	4649      	mov	r1, r9
 80066c8:	4638      	mov	r0, r7
 80066ca:	47c0      	blx	r8
 80066cc:	3001      	adds	r0, #1
 80066ce:	d103      	bne.n	80066d8 <_printf_common+0xac>
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d8:	3501      	adds	r5, #1
 80066da:	e7c6      	b.n	800666a <_printf_common+0x3e>
 80066dc:	18e1      	adds	r1, r4, r3
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	2030      	movs	r0, #48	; 0x30
 80066e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066e6:	4422      	add	r2, r4
 80066e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066f0:	3302      	adds	r3, #2
 80066f2:	e7c7      	b.n	8006684 <_printf_common+0x58>
 80066f4:	2301      	movs	r3, #1
 80066f6:	4622      	mov	r2, r4
 80066f8:	4649      	mov	r1, r9
 80066fa:	4638      	mov	r0, r7
 80066fc:	47c0      	blx	r8
 80066fe:	3001      	adds	r0, #1
 8006700:	d0e6      	beq.n	80066d0 <_printf_common+0xa4>
 8006702:	3601      	adds	r6, #1
 8006704:	e7d9      	b.n	80066ba <_printf_common+0x8e>
	...

08006708 <_printf_i>:
 8006708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	460c      	mov	r4, r1
 800670e:	4691      	mov	r9, r2
 8006710:	7e27      	ldrb	r7, [r4, #24]
 8006712:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006714:	2f78      	cmp	r7, #120	; 0x78
 8006716:	4680      	mov	r8, r0
 8006718:	469a      	mov	sl, r3
 800671a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800671e:	d807      	bhi.n	8006730 <_printf_i+0x28>
 8006720:	2f62      	cmp	r7, #98	; 0x62
 8006722:	d80a      	bhi.n	800673a <_printf_i+0x32>
 8006724:	2f00      	cmp	r7, #0
 8006726:	f000 80d8 	beq.w	80068da <_printf_i+0x1d2>
 800672a:	2f58      	cmp	r7, #88	; 0x58
 800672c:	f000 80a3 	beq.w	8006876 <_printf_i+0x16e>
 8006730:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006738:	e03a      	b.n	80067b0 <_printf_i+0xa8>
 800673a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800673e:	2b15      	cmp	r3, #21
 8006740:	d8f6      	bhi.n	8006730 <_printf_i+0x28>
 8006742:	a001      	add	r0, pc, #4	; (adr r0, 8006748 <_printf_i+0x40>)
 8006744:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006748:	080067a1 	.word	0x080067a1
 800674c:	080067b5 	.word	0x080067b5
 8006750:	08006731 	.word	0x08006731
 8006754:	08006731 	.word	0x08006731
 8006758:	08006731 	.word	0x08006731
 800675c:	08006731 	.word	0x08006731
 8006760:	080067b5 	.word	0x080067b5
 8006764:	08006731 	.word	0x08006731
 8006768:	08006731 	.word	0x08006731
 800676c:	08006731 	.word	0x08006731
 8006770:	08006731 	.word	0x08006731
 8006774:	080068c1 	.word	0x080068c1
 8006778:	080067e5 	.word	0x080067e5
 800677c:	080068a3 	.word	0x080068a3
 8006780:	08006731 	.word	0x08006731
 8006784:	08006731 	.word	0x08006731
 8006788:	080068e3 	.word	0x080068e3
 800678c:	08006731 	.word	0x08006731
 8006790:	080067e5 	.word	0x080067e5
 8006794:	08006731 	.word	0x08006731
 8006798:	08006731 	.word	0x08006731
 800679c:	080068ab 	.word	0x080068ab
 80067a0:	680b      	ldr	r3, [r1, #0]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	600a      	str	r2, [r1, #0]
 80067a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0a3      	b.n	80068fc <_printf_i+0x1f4>
 80067b4:	6825      	ldr	r5, [r4, #0]
 80067b6:	6808      	ldr	r0, [r1, #0]
 80067b8:	062e      	lsls	r6, r5, #24
 80067ba:	f100 0304 	add.w	r3, r0, #4
 80067be:	d50a      	bpl.n	80067d6 <_printf_i+0xce>
 80067c0:	6805      	ldr	r5, [r0, #0]
 80067c2:	600b      	str	r3, [r1, #0]
 80067c4:	2d00      	cmp	r5, #0
 80067c6:	da03      	bge.n	80067d0 <_printf_i+0xc8>
 80067c8:	232d      	movs	r3, #45	; 0x2d
 80067ca:	426d      	negs	r5, r5
 80067cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d0:	485e      	ldr	r0, [pc, #376]	; (800694c <_printf_i+0x244>)
 80067d2:	230a      	movs	r3, #10
 80067d4:	e019      	b.n	800680a <_printf_i+0x102>
 80067d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80067da:	6805      	ldr	r5, [r0, #0]
 80067dc:	600b      	str	r3, [r1, #0]
 80067de:	bf18      	it	ne
 80067e0:	b22d      	sxthne	r5, r5
 80067e2:	e7ef      	b.n	80067c4 <_printf_i+0xbc>
 80067e4:	680b      	ldr	r3, [r1, #0]
 80067e6:	6825      	ldr	r5, [r4, #0]
 80067e8:	1d18      	adds	r0, r3, #4
 80067ea:	6008      	str	r0, [r1, #0]
 80067ec:	0628      	lsls	r0, r5, #24
 80067ee:	d501      	bpl.n	80067f4 <_printf_i+0xec>
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	e002      	b.n	80067fa <_printf_i+0xf2>
 80067f4:	0669      	lsls	r1, r5, #25
 80067f6:	d5fb      	bpl.n	80067f0 <_printf_i+0xe8>
 80067f8:	881d      	ldrh	r5, [r3, #0]
 80067fa:	4854      	ldr	r0, [pc, #336]	; (800694c <_printf_i+0x244>)
 80067fc:	2f6f      	cmp	r7, #111	; 0x6f
 80067fe:	bf0c      	ite	eq
 8006800:	2308      	moveq	r3, #8
 8006802:	230a      	movne	r3, #10
 8006804:	2100      	movs	r1, #0
 8006806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800680a:	6866      	ldr	r6, [r4, #4]
 800680c:	60a6      	str	r6, [r4, #8]
 800680e:	2e00      	cmp	r6, #0
 8006810:	bfa2      	ittt	ge
 8006812:	6821      	ldrge	r1, [r4, #0]
 8006814:	f021 0104 	bicge.w	r1, r1, #4
 8006818:	6021      	strge	r1, [r4, #0]
 800681a:	b90d      	cbnz	r5, 8006820 <_printf_i+0x118>
 800681c:	2e00      	cmp	r6, #0
 800681e:	d04d      	beq.n	80068bc <_printf_i+0x1b4>
 8006820:	4616      	mov	r6, r2
 8006822:	fbb5 f1f3 	udiv	r1, r5, r3
 8006826:	fb03 5711 	mls	r7, r3, r1, r5
 800682a:	5dc7      	ldrb	r7, [r0, r7]
 800682c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006830:	462f      	mov	r7, r5
 8006832:	42bb      	cmp	r3, r7
 8006834:	460d      	mov	r5, r1
 8006836:	d9f4      	bls.n	8006822 <_printf_i+0x11a>
 8006838:	2b08      	cmp	r3, #8
 800683a:	d10b      	bne.n	8006854 <_printf_i+0x14c>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	07df      	lsls	r7, r3, #31
 8006840:	d508      	bpl.n	8006854 <_printf_i+0x14c>
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	6861      	ldr	r1, [r4, #4]
 8006846:	4299      	cmp	r1, r3
 8006848:	bfde      	ittt	le
 800684a:	2330      	movle	r3, #48	; 0x30
 800684c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006850:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006854:	1b92      	subs	r2, r2, r6
 8006856:	6122      	str	r2, [r4, #16]
 8006858:	f8cd a000 	str.w	sl, [sp]
 800685c:	464b      	mov	r3, r9
 800685e:	aa03      	add	r2, sp, #12
 8006860:	4621      	mov	r1, r4
 8006862:	4640      	mov	r0, r8
 8006864:	f7ff fee2 	bl	800662c <_printf_common>
 8006868:	3001      	adds	r0, #1
 800686a:	d14c      	bne.n	8006906 <_printf_i+0x1fe>
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	b004      	add	sp, #16
 8006872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006876:	4835      	ldr	r0, [pc, #212]	; (800694c <_printf_i+0x244>)
 8006878:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	680e      	ldr	r6, [r1, #0]
 8006880:	061f      	lsls	r7, r3, #24
 8006882:	f856 5b04 	ldr.w	r5, [r6], #4
 8006886:	600e      	str	r6, [r1, #0]
 8006888:	d514      	bpl.n	80068b4 <_printf_i+0x1ac>
 800688a:	07d9      	lsls	r1, r3, #31
 800688c:	bf44      	itt	mi
 800688e:	f043 0320 	orrmi.w	r3, r3, #32
 8006892:	6023      	strmi	r3, [r4, #0]
 8006894:	b91d      	cbnz	r5, 800689e <_printf_i+0x196>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f023 0320 	bic.w	r3, r3, #32
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	2310      	movs	r3, #16
 80068a0:	e7b0      	b.n	8006804 <_printf_i+0xfc>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	f043 0320 	orr.w	r3, r3, #32
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	2378      	movs	r3, #120	; 0x78
 80068ac:	4828      	ldr	r0, [pc, #160]	; (8006950 <_printf_i+0x248>)
 80068ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068b2:	e7e3      	b.n	800687c <_printf_i+0x174>
 80068b4:	065e      	lsls	r6, r3, #25
 80068b6:	bf48      	it	mi
 80068b8:	b2ad      	uxthmi	r5, r5
 80068ba:	e7e6      	b.n	800688a <_printf_i+0x182>
 80068bc:	4616      	mov	r6, r2
 80068be:	e7bb      	b.n	8006838 <_printf_i+0x130>
 80068c0:	680b      	ldr	r3, [r1, #0]
 80068c2:	6826      	ldr	r6, [r4, #0]
 80068c4:	6960      	ldr	r0, [r4, #20]
 80068c6:	1d1d      	adds	r5, r3, #4
 80068c8:	600d      	str	r5, [r1, #0]
 80068ca:	0635      	lsls	r5, r6, #24
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	d501      	bpl.n	80068d4 <_printf_i+0x1cc>
 80068d0:	6018      	str	r0, [r3, #0]
 80068d2:	e002      	b.n	80068da <_printf_i+0x1d2>
 80068d4:	0671      	lsls	r1, r6, #25
 80068d6:	d5fb      	bpl.n	80068d0 <_printf_i+0x1c8>
 80068d8:	8018      	strh	r0, [r3, #0]
 80068da:	2300      	movs	r3, #0
 80068dc:	6123      	str	r3, [r4, #16]
 80068de:	4616      	mov	r6, r2
 80068e0:	e7ba      	b.n	8006858 <_printf_i+0x150>
 80068e2:	680b      	ldr	r3, [r1, #0]
 80068e4:	1d1a      	adds	r2, r3, #4
 80068e6:	600a      	str	r2, [r1, #0]
 80068e8:	681e      	ldr	r6, [r3, #0]
 80068ea:	6862      	ldr	r2, [r4, #4]
 80068ec:	2100      	movs	r1, #0
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7f9 fc76 	bl	80001e0 <memchr>
 80068f4:	b108      	cbz	r0, 80068fa <_printf_i+0x1f2>
 80068f6:	1b80      	subs	r0, r0, r6
 80068f8:	6060      	str	r0, [r4, #4]
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	6123      	str	r3, [r4, #16]
 80068fe:	2300      	movs	r3, #0
 8006900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006904:	e7a8      	b.n	8006858 <_printf_i+0x150>
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	4632      	mov	r2, r6
 800690a:	4649      	mov	r1, r9
 800690c:	4640      	mov	r0, r8
 800690e:	47d0      	blx	sl
 8006910:	3001      	adds	r0, #1
 8006912:	d0ab      	beq.n	800686c <_printf_i+0x164>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	079b      	lsls	r3, r3, #30
 8006918:	d413      	bmi.n	8006942 <_printf_i+0x23a>
 800691a:	68e0      	ldr	r0, [r4, #12]
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	4298      	cmp	r0, r3
 8006920:	bfb8      	it	lt
 8006922:	4618      	movlt	r0, r3
 8006924:	e7a4      	b.n	8006870 <_printf_i+0x168>
 8006926:	2301      	movs	r3, #1
 8006928:	4632      	mov	r2, r6
 800692a:	4649      	mov	r1, r9
 800692c:	4640      	mov	r0, r8
 800692e:	47d0      	blx	sl
 8006930:	3001      	adds	r0, #1
 8006932:	d09b      	beq.n	800686c <_printf_i+0x164>
 8006934:	3501      	adds	r5, #1
 8006936:	68e3      	ldr	r3, [r4, #12]
 8006938:	9903      	ldr	r1, [sp, #12]
 800693a:	1a5b      	subs	r3, r3, r1
 800693c:	42ab      	cmp	r3, r5
 800693e:	dcf2      	bgt.n	8006926 <_printf_i+0x21e>
 8006940:	e7eb      	b.n	800691a <_printf_i+0x212>
 8006942:	2500      	movs	r5, #0
 8006944:	f104 0619 	add.w	r6, r4, #25
 8006948:	e7f5      	b.n	8006936 <_printf_i+0x22e>
 800694a:	bf00      	nop
 800694c:	08007269 	.word	0x08007269
 8006950:	0800727a 	.word	0x0800727a

08006954 <memcpy>:
 8006954:	440a      	add	r2, r1
 8006956:	4291      	cmp	r1, r2
 8006958:	f100 33ff 	add.w	r3, r0, #4294967295
 800695c:	d100      	bne.n	8006960 <memcpy+0xc>
 800695e:	4770      	bx	lr
 8006960:	b510      	push	{r4, lr}
 8006962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800696a:	4291      	cmp	r1, r2
 800696c:	d1f9      	bne.n	8006962 <memcpy+0xe>
 800696e:	bd10      	pop	{r4, pc}

08006970 <memmove>:
 8006970:	4288      	cmp	r0, r1
 8006972:	b510      	push	{r4, lr}
 8006974:	eb01 0402 	add.w	r4, r1, r2
 8006978:	d902      	bls.n	8006980 <memmove+0x10>
 800697a:	4284      	cmp	r4, r0
 800697c:	4623      	mov	r3, r4
 800697e:	d807      	bhi.n	8006990 <memmove+0x20>
 8006980:	1e43      	subs	r3, r0, #1
 8006982:	42a1      	cmp	r1, r4
 8006984:	d008      	beq.n	8006998 <memmove+0x28>
 8006986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800698a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800698e:	e7f8      	b.n	8006982 <memmove+0x12>
 8006990:	4402      	add	r2, r0
 8006992:	4601      	mov	r1, r0
 8006994:	428a      	cmp	r2, r1
 8006996:	d100      	bne.n	800699a <memmove+0x2a>
 8006998:	bd10      	pop	{r4, pc}
 800699a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800699e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069a2:	e7f7      	b.n	8006994 <memmove+0x24>

080069a4 <_free_r>:
 80069a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069a6:	2900      	cmp	r1, #0
 80069a8:	d048      	beq.n	8006a3c <_free_r+0x98>
 80069aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ae:	9001      	str	r0, [sp, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f1a1 0404 	sub.w	r4, r1, #4
 80069b6:	bfb8      	it	lt
 80069b8:	18e4      	addlt	r4, r4, r3
 80069ba:	f000 f8d3 	bl	8006b64 <__malloc_lock>
 80069be:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <_free_r+0x9c>)
 80069c0:	9801      	ldr	r0, [sp, #4]
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	4615      	mov	r5, r2
 80069c6:	b933      	cbnz	r3, 80069d6 <_free_r+0x32>
 80069c8:	6063      	str	r3, [r4, #4]
 80069ca:	6014      	str	r4, [r2, #0]
 80069cc:	b003      	add	sp, #12
 80069ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069d2:	f000 b8cd 	b.w	8006b70 <__malloc_unlock>
 80069d6:	42a3      	cmp	r3, r4
 80069d8:	d90b      	bls.n	80069f2 <_free_r+0x4e>
 80069da:	6821      	ldr	r1, [r4, #0]
 80069dc:	1862      	adds	r2, r4, r1
 80069de:	4293      	cmp	r3, r2
 80069e0:	bf04      	itt	eq
 80069e2:	681a      	ldreq	r2, [r3, #0]
 80069e4:	685b      	ldreq	r3, [r3, #4]
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	bf04      	itt	eq
 80069ea:	1852      	addeq	r2, r2, r1
 80069ec:	6022      	streq	r2, [r4, #0]
 80069ee:	602c      	str	r4, [r5, #0]
 80069f0:	e7ec      	b.n	80069cc <_free_r+0x28>
 80069f2:	461a      	mov	r2, r3
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	b10b      	cbz	r3, 80069fc <_free_r+0x58>
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d9fa      	bls.n	80069f2 <_free_r+0x4e>
 80069fc:	6811      	ldr	r1, [r2, #0]
 80069fe:	1855      	adds	r5, r2, r1
 8006a00:	42a5      	cmp	r5, r4
 8006a02:	d10b      	bne.n	8006a1c <_free_r+0x78>
 8006a04:	6824      	ldr	r4, [r4, #0]
 8006a06:	4421      	add	r1, r4
 8006a08:	1854      	adds	r4, r2, r1
 8006a0a:	42a3      	cmp	r3, r4
 8006a0c:	6011      	str	r1, [r2, #0]
 8006a0e:	d1dd      	bne.n	80069cc <_free_r+0x28>
 8006a10:	681c      	ldr	r4, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	6053      	str	r3, [r2, #4]
 8006a16:	4421      	add	r1, r4
 8006a18:	6011      	str	r1, [r2, #0]
 8006a1a:	e7d7      	b.n	80069cc <_free_r+0x28>
 8006a1c:	d902      	bls.n	8006a24 <_free_r+0x80>
 8006a1e:	230c      	movs	r3, #12
 8006a20:	6003      	str	r3, [r0, #0]
 8006a22:	e7d3      	b.n	80069cc <_free_r+0x28>
 8006a24:	6825      	ldr	r5, [r4, #0]
 8006a26:	1961      	adds	r1, r4, r5
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	bf04      	itt	eq
 8006a2c:	6819      	ldreq	r1, [r3, #0]
 8006a2e:	685b      	ldreq	r3, [r3, #4]
 8006a30:	6063      	str	r3, [r4, #4]
 8006a32:	bf04      	itt	eq
 8006a34:	1949      	addeq	r1, r1, r5
 8006a36:	6021      	streq	r1, [r4, #0]
 8006a38:	6054      	str	r4, [r2, #4]
 8006a3a:	e7c7      	b.n	80069cc <_free_r+0x28>
 8006a3c:	b003      	add	sp, #12
 8006a3e:	bd30      	pop	{r4, r5, pc}
 8006a40:	20000094 	.word	0x20000094

08006a44 <_malloc_r>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	1ccd      	adds	r5, r1, #3
 8006a48:	f025 0503 	bic.w	r5, r5, #3
 8006a4c:	3508      	adds	r5, #8
 8006a4e:	2d0c      	cmp	r5, #12
 8006a50:	bf38      	it	cc
 8006a52:	250c      	movcc	r5, #12
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	4606      	mov	r6, r0
 8006a58:	db01      	blt.n	8006a5e <_malloc_r+0x1a>
 8006a5a:	42a9      	cmp	r1, r5
 8006a5c:	d903      	bls.n	8006a66 <_malloc_r+0x22>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	6033      	str	r3, [r6, #0]
 8006a62:	2000      	movs	r0, #0
 8006a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a66:	f000 f87d 	bl	8006b64 <__malloc_lock>
 8006a6a:	4921      	ldr	r1, [pc, #132]	; (8006af0 <_malloc_r+0xac>)
 8006a6c:	680a      	ldr	r2, [r1, #0]
 8006a6e:	4614      	mov	r4, r2
 8006a70:	b99c      	cbnz	r4, 8006a9a <_malloc_r+0x56>
 8006a72:	4f20      	ldr	r7, [pc, #128]	; (8006af4 <_malloc_r+0xb0>)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	b923      	cbnz	r3, 8006a82 <_malloc_r+0x3e>
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f000 f862 	bl	8006b44 <_sbrk_r>
 8006a80:	6038      	str	r0, [r7, #0]
 8006a82:	4629      	mov	r1, r5
 8006a84:	4630      	mov	r0, r6
 8006a86:	f000 f85d 	bl	8006b44 <_sbrk_r>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	d123      	bne.n	8006ad6 <_malloc_r+0x92>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	6033      	str	r3, [r6, #0]
 8006a92:	4630      	mov	r0, r6
 8006a94:	f000 f86c 	bl	8006b70 <__malloc_unlock>
 8006a98:	e7e3      	b.n	8006a62 <_malloc_r+0x1e>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	1b5b      	subs	r3, r3, r5
 8006a9e:	d417      	bmi.n	8006ad0 <_malloc_r+0x8c>
 8006aa0:	2b0b      	cmp	r3, #11
 8006aa2:	d903      	bls.n	8006aac <_malloc_r+0x68>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	441c      	add	r4, r3
 8006aa8:	6025      	str	r5, [r4, #0]
 8006aaa:	e004      	b.n	8006ab6 <_malloc_r+0x72>
 8006aac:	6863      	ldr	r3, [r4, #4]
 8006aae:	42a2      	cmp	r2, r4
 8006ab0:	bf0c      	ite	eq
 8006ab2:	600b      	streq	r3, [r1, #0]
 8006ab4:	6053      	strne	r3, [r2, #4]
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f000 f85a 	bl	8006b70 <__malloc_unlock>
 8006abc:	f104 000b 	add.w	r0, r4, #11
 8006ac0:	1d23      	adds	r3, r4, #4
 8006ac2:	f020 0007 	bic.w	r0, r0, #7
 8006ac6:	1ac2      	subs	r2, r0, r3
 8006ac8:	d0cc      	beq.n	8006a64 <_malloc_r+0x20>
 8006aca:	1a1b      	subs	r3, r3, r0
 8006acc:	50a3      	str	r3, [r4, r2]
 8006ace:	e7c9      	b.n	8006a64 <_malloc_r+0x20>
 8006ad0:	4622      	mov	r2, r4
 8006ad2:	6864      	ldr	r4, [r4, #4]
 8006ad4:	e7cc      	b.n	8006a70 <_malloc_r+0x2c>
 8006ad6:	1cc4      	adds	r4, r0, #3
 8006ad8:	f024 0403 	bic.w	r4, r4, #3
 8006adc:	42a0      	cmp	r0, r4
 8006ade:	d0e3      	beq.n	8006aa8 <_malloc_r+0x64>
 8006ae0:	1a21      	subs	r1, r4, r0
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f000 f82e 	bl	8006b44 <_sbrk_r>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d1dd      	bne.n	8006aa8 <_malloc_r+0x64>
 8006aec:	e7cf      	b.n	8006a8e <_malloc_r+0x4a>
 8006aee:	bf00      	nop
 8006af0:	20000094 	.word	0x20000094
 8006af4:	20000098 	.word	0x20000098

08006af8 <_realloc_r>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	4607      	mov	r7, r0
 8006afc:	4614      	mov	r4, r2
 8006afe:	460e      	mov	r6, r1
 8006b00:	b921      	cbnz	r1, 8006b0c <_realloc_r+0x14>
 8006b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b06:	4611      	mov	r1, r2
 8006b08:	f7ff bf9c 	b.w	8006a44 <_malloc_r>
 8006b0c:	b922      	cbnz	r2, 8006b18 <_realloc_r+0x20>
 8006b0e:	f7ff ff49 	bl	80069a4 <_free_r>
 8006b12:	4625      	mov	r5, r4
 8006b14:	4628      	mov	r0, r5
 8006b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b18:	f000 f830 	bl	8006b7c <_malloc_usable_size_r>
 8006b1c:	42a0      	cmp	r0, r4
 8006b1e:	d20f      	bcs.n	8006b40 <_realloc_r+0x48>
 8006b20:	4621      	mov	r1, r4
 8006b22:	4638      	mov	r0, r7
 8006b24:	f7ff ff8e 	bl	8006a44 <_malloc_r>
 8006b28:	4605      	mov	r5, r0
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d0f2      	beq.n	8006b14 <_realloc_r+0x1c>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4622      	mov	r2, r4
 8006b32:	f7ff ff0f 	bl	8006954 <memcpy>
 8006b36:	4631      	mov	r1, r6
 8006b38:	4638      	mov	r0, r7
 8006b3a:	f7ff ff33 	bl	80069a4 <_free_r>
 8006b3e:	e7e9      	b.n	8006b14 <_realloc_r+0x1c>
 8006b40:	4635      	mov	r5, r6
 8006b42:	e7e7      	b.n	8006b14 <_realloc_r+0x1c>

08006b44 <_sbrk_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d06      	ldr	r5, [pc, #24]	; (8006b60 <_sbrk_r+0x1c>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	f7fb f960 	bl	8001e14 <_sbrk>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_sbrk_r+0x1a>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_sbrk_r+0x1a>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20000690 	.word	0x20000690

08006b64 <__malloc_lock>:
 8006b64:	4801      	ldr	r0, [pc, #4]	; (8006b6c <__malloc_lock+0x8>)
 8006b66:	f000 b811 	b.w	8006b8c <__retarget_lock_acquire_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	20000698 	.word	0x20000698

08006b70 <__malloc_unlock>:
 8006b70:	4801      	ldr	r0, [pc, #4]	; (8006b78 <__malloc_unlock+0x8>)
 8006b72:	f000 b80c 	b.w	8006b8e <__retarget_lock_release_recursive>
 8006b76:	bf00      	nop
 8006b78:	20000698 	.word	0x20000698

08006b7c <_malloc_usable_size_r>:
 8006b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b80:	1f18      	subs	r0, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bfbc      	itt	lt
 8006b86:	580b      	ldrlt	r3, [r1, r0]
 8006b88:	18c0      	addlt	r0, r0, r3
 8006b8a:	4770      	bx	lr

08006b8c <__retarget_lock_acquire_recursive>:
 8006b8c:	4770      	bx	lr

08006b8e <__retarget_lock_release_recursive>:
 8006b8e:	4770      	bx	lr

08006b90 <_init>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr

08006b9c <_fini>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr
